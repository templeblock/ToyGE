#pragma once
#ifndef RENDERCOMMONDEFINES_H
#define RENDERCOMMONDEFINES_H

#include "ToyGE\Kernel\PreInclude.h"
#include "ToyGE\Kernel\CorePreInclude.h"
#include "ToyGE\RenderEngine\RenderFormat.h"

namespace ToyGE
{
	enum MapType : uint32_t
	{
		MAP_READ = 1UL,
		MAP_WRITE = 2UL,
		MAP_READ_WRITE = 3UL,
		MAP_WRITE_DISCARD = 4UL,
		MAP_WRITE_NO_OVERWRITE = 5UL
	};
	

	enum RenderInputType : uint32_t
	{
		RENDER_INPUT_PER_VERTEX = 0UL,
		RENDER_INPUT_PER_INSHADERANCE = 1UL
	};

	enum ShaderType : uint32_t
	{
		SHADER_VS = 0UL,
		SHADER_HS = 1UL,
		SHADER_DS = 2UL,
		SHADER_GS = 3UL,
		SHADER_PS = 4UL,
		SHADER_CS = 5UL
	};

	namespace ShaderTypeNum
	{
		enum ShaderTypeNumDefine
		{
			NUM = SHADER_CS + 1
		};
	}

	enum ShaderModel : uint32_t
	{
		SM_4 = 0UL,
		SM_5 = 1UL
	};

	namespace ShaderModelNum
	{
		enum ShaderModelNumDefine : uint32_t
		{
			NUM = SM_5 + 1
		};
	};

	TOYGE_CORE_API String GetShaderModelName(ShaderModel sm);

	enum TextureBindFlag : uint32_t
	{
		TEXTURE_BIND_SHADER_RESOURCE = 0x1UL << 0UL,
		TEXTURE_BIND_STREAM_OUTPUT = 0x1UL << 1UL,
		TEXTURE_BIND_RENDER_TARGET = 0x1UL << 2UL,
		TEXTURE_BIND_DEPTH_STENCIL = 0x1UL << 3UL,
		TEXTURE_BIND_UNORDERED_ACCESS = 0x1UL << 4UL,
		TEXTURE_BIND_IMMUTABLE = 0x1UL << 5UL,
		TEXTURE_BIND_GENERATE_MIPS = 0x1UL << 6UL
	};

	enum BufferBindFlag : uint32_t
	{
		BUFFER_BIND_CONSTANT = 0x1UL << 0UL,
		BUFFER_BIND_VERTEX = 0x1UL << 1UL,
		BUFFER_BIND_INDEX = 0x1UL << 2UL,
		BUFFER_BIND_UNORDERED_ACCESS = 0x1UL << 3UL,
		BUFFER_BIND_SHADER_RESOURCE = 0x1UL << 4UL,
		BUFFER_BIND_RENDER_TARGET = 0x1UL << 5UL,
		//BUFFER_BIND_STRUCTURED = 0x1UL << 6UL,
		BUFFER_BIND_IMMUTABLE = 0x1UL << 7UL,
		BUFFER_BIND_INDIRECT_ARGS = 0x1UL << 8UL,
		BUFFER_BIND_RAW = 0x1UL << 9UL
	};

	enum BufferUAVFlag : uint32_t
	{
		BUFFER_UAV_RAW = 0x1UL << 0UL,
		BUFFER_UAV_APPEND = 0x1UL << 1UL,
		BUFFER_UAV_COUNTER = 0x1UL << 2UL,
	};

	enum CpuAccessFlag : uint32_t
	{
		CPU_ACCESS_READ = 0x1UL << 0UL,
		CPU_ACCESS_WRITE = 0x1UL << 1UL,
	};

	enum CubeFace : uint32_t
	{
		CUBE_FACE_X_POSITIVE = 0UL,
		CUBE_FACE_X_NEGATIVE = 1UL,
		CUBE_FACE_Y_POSITIVE = 2UL,
		CUBE_FACE_Y_NEGATIVE = 3UL,
		CUBE_FACE_Z_POSITIVE = 4UL,
		CUBE_FACE_Z_NEGATIVE = 5UL
	};

	enum ComparisonFunc : uint32_t
	{
		COMPARISON_NEVER = 1,
		COMPARISON_LESS = 2,
		COMPARISON_EQUAL = 3,
		COMPARISON_LESS_EQUAL = 4,
		COMPARISON_GREATER = 5,
		COMPARISON_NOT_EQUAL = 6,
		COMPARISON_GREATER_EQUAL = 7,
		COMPARISON_ALWAYS = 8
	};

	enum ColorWriteMask : uint32_t
	{
		COLOR_WRITE_R = 1UL << 0UL,
		COLOR_WRITE_G = 1UL << 1UL,
		COLOR_WRITE_B = 1UL << 2UL,
		COLOR_WRITE_A = 1UL << 3UL,
		COLOR_WRITE_ALL = (COLOR_WRITE_R | COLOR_WRITE_G | COLOR_WRITE_B | COLOR_WRITE_A)
	};

	enum PrimitiveTopology : uint32_t
	{
		PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
		PRIMITIVE_TOPOLOGY_POINTLIST = 1,
		PRIMITIVE_TOPOLOGY_LINELIST = 2,
		PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
		PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
		PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
		PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
		PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
		PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
		PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
		PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
		PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
		PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
		PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
		PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
		PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
		PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
		PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
		PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
		PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
		PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
		PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
		PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
		PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
		PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
		PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
		PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
		PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
		PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
		PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
		PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
		PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
		PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
		PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
		PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
		PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
		PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
		PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
		PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
		PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
		PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
		PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
	};


	struct RenderDataDesc
	{
		void * pData;
		size_t rowPitch;
		size_t slicePitch;
	};

	struct Box
	{
		int32_t left;
		int32_t right;
		int32_t top;
		int32_t bottom;
		int32_t front;
		int32_t back;
	};

	struct Blob
	{
		void *bufferPointer;
		size_t bufferSize;
	};

	struct RenderDeviceAdapter
	{
		String description;
	};

	enum OutputScalineOrder 
	{
		SCANLINE_ORDER_UNSPECIFIED = 0,
		SCANLINE_ORDER_PROGRESSIVE = 1,
		SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
		SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
	};

	enum OutputScaling
	{
		SCALING_UNSPECIFIED = 0,
		SCALING_CENTERED = 1,
		SCALING_STRETCHED = 2
	};

	struct RenderDeviceOutputMode
	{
		int32_t width;
		int32_t height;
		int32_t refreshRateNumerator;
		int32_t refreshRateDenominator;
		OutputScalineOrder scalineOrder;
		OutputScaling scaling;
	};

}

#endif