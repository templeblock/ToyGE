#define MVO_WORLD_POSITION 1
#define MVO_VIEW_POSITION 1

#ifdef GEN_VELOCITY
#define MVO_PRE_VIEW_POSITION 1
#endif

#include "MeshVertexInput.tshader"
#include "Lighting.tshader"
#include "BRDF.tshader"
#include "View.tshader"
#include "Shadow.tshader"
#include "ScreenSpaceTracing.tshader"

Texture2D depthTex;
Texture2D sceneTex;
Texture2D lightingTex;

SamplerState linearSampler;
SamplerState pointSampler;

cbuffer cb_ambient
{
    float3 ambientColor;
};

MeshVertexVSOutputs ForwardTranslucentRenderingVS(MeshVertexVSInputs inputs)
{
	  return GetMeshVSOutputs(inputs);
}



void ForwardTranslucentRenderingPS(
    MeshVertexVSOutputs inputs,
    
#ifdef TRASLUCENT_REFRACTION

    out float3 color0 : SV_TARGET0
#ifdef GEN_VELOCITY
    , out float2  velocity : SV_TARGET1
#endif

#else

    out float3 color0 : SV_TARGET0,
    out float3 color1 : SV_TARGET1
#ifdef GEN_VELOCITY
    , out float2  velocity : SV_TARGET2
#endif

#endif
    )
{
    NormalizeMeshVertexVSOutputs(inputs);
    Material mat = GetMaterial(GetMaterialInputs(inputs));
    
    CLIP_OPCACITYMASK(mat.opacityMask, 0.1);
    
#ifdef TRASLUCENT_REFRACTION

    float3 n = mat.normal;
    float3 v = normalize(viewWorldPosition - inputs.worldPosition);

    float refractionIndex = mat.refractionIndex;
    float3 refractWorldDir = refract(-v, n, 1.0f / refractionIndex);
    float3 refractViewDir = mul(float4(refractWorldDir, 0.0f), worldToViewMatrix).xyz;
    
    float3 rayStartUVZ = float3(inputs.svPosition.xy * invViewSize, inputs.svPosition.z);
    float3 rayViewEnd =  inputs.viewPosition + refractViewDir;
    float4 rayClipEnd = mul(float4(rayViewEnd, 1.0), viewToClipMatrix);
    rayClipEnd /= rayClipEnd.w;
    float3 rayEndUVZ = float3(rayClipEnd.xy * float2(0.5, -0.5) + 0.5, rayClipEnd.z);
    
    float3 rayDirUVZ = rayEndUVZ - rayStartUVZ;
    
    float4 traceResult = RayTracing(
        depthTex,
        linearSampler,
        rayStartUVZ,
        rayDirUVZ, 
        16, 
        0.0
    );
    
    float3 traceColor = 0.0;
    
    [branch] if(traceResult.w != 0.0)
    {
        traceColor += sceneTex.SampleLevel(linearSampler, traceResult.xy, 0).xyz;
    }
    
    float3 lighting = lightingTex.SampleLevel(pointSampler, inputs.svPosition.xy * invViewSize, 0).xyz;
    color0 = mat.diffuseColor * saturate(1.0 -  mat.opacity) * traceColor + lighting;
    
#else

    float3 lighting = lightingTex.SampleLevel(pointSampler, inputs.svPosition.xy * invViewSize, 0).xyz;
    color0 = lighting;
    
    color1 = mat.diffuseColor * saturate(1.0 -  mat.opacity);
    
#endif

#ifdef GEN_VELOCITY
    velocity = 0.0f;
    
    float4 preClipPos = mul(float4(inputs.preViewPosition, 1.0f), viewToClipMatrix);
    preClipPos /= preClipPos.w;
    
    float2 velStart = preClipPos.xy * float2(0.5f, -0.5f) + 0.5f;
    float2 velEnd   = inputs.svPosition.xy * invViewSize;
    
    velocity = (velEnd - velStart);
#endif
    
}

void ForwardTranslucentLightingPS(
    MeshVertexVSOutputs inputs,
    out float3 color : SV_TARGET0
    )
{
    NormalizeMeshVertexVSOutputs(inputs);
    Material mat = GetMaterial(GetMaterialInputs(inputs));
    
    CLIP_OPCACITYMASK(mat.opacityMask, 0.1);
    
    float3 n = mat.normal;
    float3 l = GetPosToLightDir(inputs.worldPosition);
    float3 v = normalize(viewWorldPosition - inputs.worldPosition);
    
    float3 irradiance = GetIrradiance(inputs.worldPosition, n);
    
#if ENABLE_SHADOW == 1
    float shadowNoise = InterleavedGradientNoise(inputs.svPosition.xy, 0.5) + 0.5;
    float shadow = ComputeShadow(inputs.worldPosition, inputs.viewPosition.z, shadowNoise);
    irradiance *= shadow;
#endif

#ifdef INIT
    float3 lighting = 0.0;
#else
    float3 lighting = lightingTex.SampleLevel(pointSampler, inputs.svPosition.xy * invViewSize, 0).xyz;
#endif

#ifdef AMBIENT
    float3 diffuse = (irradiance / PI + ambientColor) * mat.diffuseColor * mat.opacity;
#else
    float3 diffuse = (irradiance / PI) * mat.diffuseColor * mat.opacity;
#endif
    float3 specular = irradiance * BRDF(n, l, v, mat.specularColor, mat.roughness);
    
    color = specular + diffuse + lighting;
}

void ForwardTranslucentAmbientPS(
    MeshVertexVSOutputs inputs,
    out float3 color : SV_TARGET0
    )
{
    NormalizeMeshVertexVSOutputs(inputs);
    Material mat = GetMaterial(GetMaterialInputs(inputs));
    
    CLIP_OPCACITYMASK(mat.opacityMask, 0.1);
    
    //float3 lighting = lightingTex.SampleLevel(pointSampler, inputs.svPosition.xy * invViewSize, 0).xyz;
    
    float3 diffuse = (ambientColor) * mat.diffuseColor * mat.opacity;
    
    color = diffuse;
}