#include "Common.tshader"
#include "DrawQuad.tshader"

Texture2D sceneTex;
Texture2D linearDepthTex;
Texture2D volumetricLightTex;

SamplerState pointSampler;
SamplerState linearSampler;

float4 texSize;
float2 lightPosUV;
float density;
float intensity;
float decay;
uint frameCount;

float4 PPVolumeSetupPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float4 color = sceneTex.SampleLevel(pointSampler, vsOut.uv, 0);
    float depth = linearDepthTex.SampleLevel(pointSampler, vsOut.uv, 0).x;
  
    if(depth <= 0.9999f)
      color = 0.0f;
    
    return color;
}

#define NUM_SAMPLES 16

uint MortonCode( uint x )
{
	// x = (x ^ (x <<  8)) & 0x00ff00ff;
	// x = (x ^ (x <<  4)) & 0x0f0f0f0f;
	x = (x ^ (x <<  2)) & 0x33333333;
	x = (x ^ (x <<  1)) & 0x55555555;
	return x;
}

uint ReverseUIntBits( uint bits )
{
	// bits = ( bits << 16) | ( bits >> 16);
	// bits = ( (bits & 0x00ff00ff) << 8 ) | ( (bits & 0xff00ff00) >> 8 );
	// bits = ( (bits & 0x0f0f0f0f) << 4 ) | ( (bits & 0xf0f0f0f0) >> 4 );
	bits = ( (bits & 0x33333333) << 2 ) | ( (bits & 0xcccccccc) >> 2 );
	bits = ( (bits & 0x55555555) << 1 ) | ( (bits & 0xaaaaaaaa) >> 1 );
	return bits;
}
  
float4 RadialBlurPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float2 uvCenter = vsOut.uv;
    
    float centerToLightUVLen = length(uvCenter - lightPosUV);
    
    float2 uvStep = (lightPosUV - uvCenter) * density / NUM_SAMPLES;
    float stepLen = centerToLightUVLen / NUM_SAMPLES;
    // float stepDecay = (1.0 - decay) / NUM_SAMPLES;
    
    // uint frameRandom = ((uint)frameCount % 8) * 1551;
    
    // uint morton = MortonCode( uint(vsOut.pos.x) & 4 ) | ( MortonCode( uint(vsOut.pos.y) & 4 ) * 2 );
    // uint screenPosRandom = ReverseUIntBits( morton );
    // uint2 screenPosRandom2 = ScrambleTEA( uint2( vsOut.pos.xy ) ^ frameRandom, 3 );
    
    //  uint offset = ( (screenPosRandom2.x + screenPosRandom2.y) ^ frameRandom ) & 15;
    //     float stepOffset = offset / 15.0;
    //     stepOffset -= 0.5;
    
    uint frameRandomSeed = ( ((uint)frameCount % 8) * 1551 ) & 15;
    float frameRandom = (float)frameRandomSeed;
    float dither = InterleavedGradientNoise(vsOut.pos.xy + frameRandom * 171, 0.5f);
    //dither = dither + frameRandom - 0.5;
    uvCenter = uvCenter + dither * uvStep;
    //uvStep = (lightPosUV - uvCenter) * density / NUM_SAMPLES;
    
    float2 sampleUV = uvCenter;
    
    float sampleWeight = 1.0f;
    // float sampleDecay = decay;
    
    float4 colorAccum = sceneTex.SampleLevel(linearSampler, sampleUV, 0);
    
    for(int i = 0; i < NUM_SAMPLES; ++i)
    {
        sampleUV += uvStep;
    
        float4 sampleColor = sceneTex.SampleLevel(linearSampler, sampleUV, 0);
        
        colorAccum += sampleColor * sampleWeight;
        
        sampleWeight *= decay;
    }
    
    colorAccum /= NUM_SAMPLES;
    
    float2 lightPosH = lightPosUV * float2(2.0f, -2.0f) + float2(-1.0f, 1.0f);
    float centerLen = sqrt(max(1e-4, dot(lightPosH, lightPosH)));
    float borderDecay = 1.0f - saturate( (centerLen - 0.0f) / 1.0f );
    
    colorAccum *= borderDecay;
    
    return float4(colorAccum.xyz * intensity, 1.0f);
}

float4 BlurVolumetricLightPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float4 centerColor = volumetricLightTex.SampleLevel(pointSampler, vsOut.uv, 0);
    // float centerDepth = linearDepthTex.SampleLevel(pointSampler, vsOut.uv, 0).x;
    
    float4 colorSum = centerColor;
    
    float2 dir = lightPosUV - vsOut.uv;
    float len = length(dir);
    if(len <= 1e-4)
        return centerColor;
        
    dir /= len;
    
    float dither = InterleavedGradientNoise(vsOut.pos.xy, 0.5f);
    dither = dither + 0.5f;
    
    float stepLen =  texSize.z * 1.5;// * (dither + 1.0);
    // float weightSum = 1e4;
    
    [unroll] for(int i = -1; i <= 1; ++i)
    {
        if( i == 0 )
            continue;
            
        float2 sampleUV = vsOut.uv + i * dir * stepLen;
        
        // float sampleDepth = linearDepthTex.SampleLevel(linearSampler, sampleUV, 0).x;
        // float weight = 1.0 / (max(1e-4, abs(sampleDepth - centerDepth)));
        
        colorSum += volumetricLightTex.SampleLevel(linearSampler, sampleUV, 0);// * weight;
        // weightSum += weight;
    }
    
    colorSum /= 3;
    // colorSum /= weightSum;
    
    return colorSum;
}