#ifndef LPVCOMMON_TSHADER
#define LPVCOMMON_TSHADER

#include "Common.tshader"

RWTexture3D<float4> lightVolumeRW0;
RWTexture3D<float4> lightVolumeRW1;
RWTexture3D<float4> lightVolumeRW2;
RWTexture3D<float4> lightVolumeRW3;
RWTexture3D<float4> lightVolumeRW4;
RWTexture3D<float4> lightVolumeRW5;
RWTexture3D<float4> lightVolumeRW6;

Texture3D lightVolume0;
Texture3D lightVolume1;
Texture3D lightVolume2;
Texture3D lightVolume3;
Texture3D lightVolume4;
Texture3D lightVolume5;
Texture3D lightVolume6;

RWTexture3D<float4> geometryVolumeRW0;
RWTexture3D<float4> geometryVolumeRW1;
RWTexture3D<float4> geometryVolumeRW2;

Texture3D geometryVolume0;
Texture3D geometryVolume1;
Texture3D geometryVolume2;

SamplerState linearSampler;

float3 worldToGridScale;
float3 worldToGridOffset;
int3 lpvGridDims;

struct VPL
{
    float3 normal;
    float3 radiance;
    int next;
};

struct LPVCell
{
    float3 coeffs[9];
};

struct GVCell
{
    float coeffs[9];
};

float3 WorldToGrid(float3 worldPos)
{
    return (worldPos + worldToGridOffset) * worldToGridScale;
}

int GridPosToIndex(float3 gridPos)
{
    int3 pos = int3(gridPos);
    
    return pos.z * lpvGridDims.x * lpvGridDims.y
    + pos.y * lpvGridDims.x
    + pos.x;
}
    
int GetGridIndex(float3 worldPos)
{
    float3 gridPos = WorldToGrid(worldPos);
    
    int index = GridPosToIndex(gridPos);
    
    float3 maxExtents = float3(lpvGridDims) * 0.5f;
    if( any( abs(gridPos - maxExtents) > maxExtents - 1e-4 ) )
        index = -1;
    
    return index;
}

void SHCoeffs9(float3 n, out float3 coeffs[9])
{
/*
    const float c0 = 0.282095f;
	  const float c1 = 0.488603f;
	  const float c2 = 1.092548f;
	  const float c3 = 0.315392f;
	  const float c4 = 0.546274f;
    
	  coeffs[0] = c0 ;

	  coeffs[1] = (c1*n.y);   
	  coeffs[2] = (c1*n.z);   
	  coeffs[3] = (c1*n.x);   

	  coeffs[4] = (c2*n.x*n.y); 
	  coeffs[5] = (c2*n.y*n.z); 
	  coeffs[7] = (c2*n.x*n.z); 
	  coeffs[6] = (c3*(3.0f*n.z*n.z-1.0f)); 
	  coeffs[8] = (c4*(n.x*n.x-n.y*n.y));
*/
    const float c0 = 0.282095f;
	  const float c1 = 0.488603f;
	  const float c2 = 1.092548f;
	  const float c3 = 0.315392f;
	  const float c4 = 0.546274f;
    
    const float s0 = ((2.0*PI)/3.0f);
    const float s1 = (PI/4.0f);
    
	  coeffs[0] = c0 * PI;

	  coeffs[1] = -(c1*n.y) * s0;   
	  coeffs[2] =  (c1*n.z) * s0;   
	  coeffs[3] = -(c1*n.x) * s0;   

	  coeffs[4] =  (c2*n.x*n.y) * s1; 
	  coeffs[5] = -(c2*n.y*n.z) * s1; 
	  coeffs[6] =  (c3*(3.0f*n.z*n.z-1.0f)) * s1; 
	  coeffs[7] = -(c2*n.x*n.z) * s1; 
	  coeffs[8] =  (c4*(n.x*n.x-n.y*n.y)) * s1;
}

void SHCoeffs9(float3 n, out float coeffs[9])
{
/*
    const float c0 = 0.282095f;
	  const float c1 = 0.488603f;
	  const float c2 = 1.092548f;
	  const float c3 = 0.315392f;
	  const float c4 = 0.546274f;
    
	  coeffs[0] = c0 ;

	  coeffs[1] = (c1*n.y);   
	  coeffs[2] = (c1*n.z);   
	  coeffs[3] = (c1*n.x);   

	  coeffs[4] = (c2*n.x*n.y); 
	  coeffs[5] = (c2*n.y*n.z); 
	  coeffs[7] = (c2*n.x*n.z); 
	  coeffs[6] = (c3*(3.0f*n.z*n.z-1.0f)); 
	  coeffs[8] = (c4*(n.x*n.x-n.y*n.y));
*/
    const float c0 = 0.282095f;
	  const float c1 = 0.488603f;
	  const float c2 = 1.092548f;
	  const float c3 = 0.315392f;
	  const float c4 = 0.546274f;
    
    const float s0 = ((2.0*PI)/3.0f);
    const float s1 = (PI/4.0f);
    
	  coeffs[0] = c0 * PI;

	  coeffs[1] = -(c1*n.y) * s0;   
	  coeffs[2] =  (c1*n.z) * s0;   
	  coeffs[3] = -(c1*n.x) * s0;   

	  coeffs[4] =  (c2*n.x*n.y) * s1; 
	  coeffs[5] = -(c2*n.y*n.z) * s1; 
	  coeffs[6] =  (c3*(3.0f*n.z*n.z-1.0f)) * s1; 
	  coeffs[7] = -(c2*n.x*n.z) * s1; 
	  coeffs[8] =  (c4*(n.x*n.x-n.y*n.y)) * s1;
}

float3 SynSHCoeffs9(float3 n, float3 coeffs[9])
{

/*
    const float1 c1 = 0.429043 ;
	  const float1 c2 = 0.511664 ;
	  const float1 c3 = 0.743125 ;
	  const float1 c4 = 0.886227 ;
	  const float1 c5 = 0.247708 ;

	  float3 n2 = n*n;
	  float xy = n.x*n.y ; 
	  float yz = n.y*n.z ; 
	  float xz = n.x*n.z ;

	  float3 color = c1*coeffs[8]*(n2.x-n2.y) + c3*coeffs[6]*n2.z + c4*coeffs[0] - c5*coeffs[6] 
            + 2.0f*c1*(coeffs[4]*xy + coeffs[7]*xz + coeffs[5]*yz) 
            + 2.0f*c2*(coeffs[3]*n.x+coeffs[1]*n.y+coeffs[2]*n.z) ;

	  return max( color, float3(0,0,0) );
*/
    
    
    const float c0 = 0.282095f;
	  const float c1 = 0.488603f;
	  const float c2 = 1.092548f;
	  const float c3 = 0.315392f;
	  const float c4 = 0.546274f;
    
    float3 result = 0.0f;
    
	  result += c0 * coeffs[0];

	  result += -(c1*n.y) * coeffs[1];   
	  result +=  (c1*n.z) * coeffs[2];   
	  result += -(c1*n.x) * coeffs[3];   

	  result +=  (c2*n.x*n.y) * coeffs[4]; 
	  result += -(c2*n.y*n.z) * coeffs[5]; 
	  result +=  (c3*(3.0f*n.z*n.z-1.0f)) * coeffs[6]; 
	  result += -(c2*n.x*n.z) * coeffs[7]; 
	  result +=  (c4*(n.x*n.x-n.y*n.y)) * coeffs[8];
    
    return result;
}

float SynSHCoeffs9(float3 n, float coeffs[9])
{
/*
    const float1 c1 = 0.429043 ;
	  const float1 c2 = 0.511664 ;
	  const float1 c3 = 0.743125 ;
	  const float1 c4 = 0.886227 ;
	  const float1 c5 = 0.247708 ;

	  float3 n2 = n*n;
	  float xy = n.x*n.y ; 
	  float yz = n.y*n.z ; 
	  float xz = n.x*n.z ;

	  float value = c1*coeffs[8]*(n2.x-n2.y) + c3*coeffs[6]*n2.z + c4*coeffs[0] - c5*coeffs[6] 
            + 2.0f*c1*(coeffs[4]*xy + coeffs[7]*xz + coeffs[5]*yz) 
            + 2.0f*c2*(coeffs[3]*n.x+coeffs[1]*n.y+coeffs[2]*n.z) ;

	  return max( value, 0 );
*/
    
    const float c0 = 0.282095f;
	  const float c1 = 0.488603f;
	  const float c2 = 1.092548f;
	  const float c3 = 0.315392f;
	  const float c4 = 0.546274f;
    
    float result = 0.0f;
    
	  result += c0 * coeffs[0];

	  result += -(c1*n.y) * coeffs[1];   
	  result +=  (c1*n.z) * coeffs[2];   
	  result += -(c1*n.x) * coeffs[3];   

	  result +=  (c2*n.x*n.y) * coeffs[4]; 
	  result += -(c2*n.y*n.z) * coeffs[5]; 
	  result +=  (c3*(3.0f*n.z*n.z-1.0f)) * coeffs[6]; 
	  result += -(c2*n.x*n.z) * coeffs[7]; 
	  result +=  (c4*(n.x*n.x-n.y*n.y)) * coeffs[8];
    
    return result;
}

void AccumSH(float3 n, float3 color, float solidAngle, in out LPVCell cell)
{
    float3 coeffs[9];
    SHCoeffs9(n, coeffs);
    
    [unroll] for(int i = 0; i < 9; ++i)
    {
        cell.coeffs[i] += coeffs[i] * color * solidAngle;
    }
}

void AccumSH(float3 n, float weight, in out GVCell cell)
{
    float coeffs[9];
    SHCoeffs9(n, coeffs);
    
    [unroll] for(int i = 0; i < 9; ++i)
    {
        cell.coeffs[i] += coeffs[i] * weight;
    }
}

void WriteLPVCell(int3 gridPos, in out LPVCell cell)
{
    lightVolumeRW0[gridPos] = float4(cell.coeffs[0].x, cell.coeffs[0].y, cell.coeffs[0].z, 0.0f);
    lightVolumeRW1[gridPos] = float4(cell.coeffs[1].x, cell.coeffs[1].y, cell.coeffs[1].z, cell.coeffs[2].x);
    lightVolumeRW2[gridPos] = float4(cell.coeffs[2].y, cell.coeffs[2].z, cell.coeffs[3].x, cell.coeffs[3].y);
    lightVolumeRW3[gridPos] = float4(cell.coeffs[3].z, cell.coeffs[4].x, cell.coeffs[4].y, cell.coeffs[4].z);
    lightVolumeRW4[gridPos] = float4(cell.coeffs[5].x, cell.coeffs[5].y, cell.coeffs[5].z, cell.coeffs[6].x);
    lightVolumeRW5[gridPos] = float4(cell.coeffs[6].y, cell.coeffs[6].z, cell.coeffs[7].x, cell.coeffs[7].y);
    lightVolumeRW6[gridPos] = float4(cell.coeffs[7].z, cell.coeffs[8].x, cell.coeffs[8].y, cell.coeffs[8].z);
}

void WriteGVCell(int3 gridPos, in out GVCell cell)
{
    geometryVolumeRW0[gridPos] = float4(cell.coeffs[0], cell.coeffs[1], cell.coeffs[2], cell.coeffs[3]);
    geometryVolumeRW1[gridPos] = float4(cell.coeffs[4], cell.coeffs[5], cell.coeffs[6], cell.coeffs[7]);
    geometryVolumeRW2[gridPos] = float(cell.coeffs[8]);
}

LPVCell ReadLPVCell(int3 gridPos)
{
    int4 pos = int4(gridPos, 0);
    float4 volume0 = lightVolume0.Load(pos);
    float4 volume1 = lightVolume1.Load(pos);
    float4 volume2 = lightVolume2.Load(pos);
    float4 volume3 = lightVolume3.Load(pos);
    float4 volume4 = lightVolume4.Load(pos);
    float4 volume5 = lightVolume5.Load(pos);
    float4 volume6 = lightVolume6.Load(pos);
    
    LPVCell cell;
    cell.coeffs[0] = volume0.xyz;
    cell.coeffs[1] = volume1.xyz;
    cell.coeffs[2] = float3(volume1.w, volume2.xy);
    cell.coeffs[3] = float3(volume2.zw, volume3.x);
    cell.coeffs[4] = float3(volume3.yzw);
    cell.coeffs[5] = float3(volume4.xyz);
    cell.coeffs[6] = float3(volume4.w, volume5.xy);
    cell.coeffs[7] = float3(volume5.zw, volume6.x);
    cell.coeffs[8] = float3(volume6.yzw);
    
    return cell;
}

// LPVCell ReadLPVCellRW(int3 gridPos)
// {
//     int3 pos = gridPos;
//     int index = pos.z * lpvGridDims.x * lpvGridDims.y + pos.y * lpvGridDims.x + pos.x;
//     float4 volume0 = lightVolumeRW0.Load(index);
//     float4 volume1 = lightVolumeRW1.Load(index);
//     float4 volume2 = lightVolumeRW2.Load(index);
//     float4 volume3 = lightVolumeRW3.Load(index);
//     float4 volume4 = lightVolumeRW4.Load(index);
//     float4 volume5 = lightVolumeRW5.Load(index);
//     float4 volume6 = lightVolumeRW6.Load(index);
//     
//     LPVCell cell;
//     cell.coeffs[0] = volume0.xyz;
//     cell.coeffs[1] = volume1.xyz;
//     cell.coeffs[2] = float3(volume1.w, volume2.xy);
//     cell.coeffs[3] = float3(volume2.zw, volume3.x);
//     cell.coeffs[4] = float3(volume3.yzw);
//     cell.coeffs[5] = float3(volume4.xyz);
//     cell.coeffs[6] = float3(volume4.w, volume5.xy);
//     cell.coeffs[7] = float3(volume5.zw, volume6.x);
//     cell.coeffs[8] = float3(volume6.yzw);
//     
//     return cell;
// }

GVCell ReadGVCell(int3 gridPos)
{
    int4 pos = int4(gridPos, 0);
    float4 volume0 = geometryVolume0.Load(pos);
    float4 volume1 = geometryVolume1.Load(pos);
    float  volume2 = geometryVolume2.Load(pos).x;
    
    GVCell cell;
    cell.coeffs[0] = volume0.x;
    cell.coeffs[1] = volume0.y;
    cell.coeffs[2] = volume0.z;
    cell.coeffs[3] = volume0.w;
    cell.coeffs[4] = volume1.x;
    cell.coeffs[5] = volume1.y;
    cell.coeffs[6] = volume1.z;
    cell.coeffs[7] = volume1.w;
    cell.coeffs[8] = volume2.x;
    
    return cell;
}

LPVCell ReadLPVCellFilter(float3 samplePos)
{
    float3 sampleTex = samplePos / float3(lpvGridDims);

    float4 volume0 = lightVolume0.SampleLevel(linearSampler, sampleTex, 0);
    float4 volume1 = lightVolume1.SampleLevel(linearSampler, sampleTex, 0);
    float4 volume2 = lightVolume2.SampleLevel(linearSampler, sampleTex, 0);
    float4 volume3 = lightVolume3.SampleLevel(linearSampler, sampleTex, 0);
    float4 volume4 = lightVolume4.SampleLevel(linearSampler, sampleTex, 0);
    float4 volume5 = lightVolume5.SampleLevel(linearSampler, sampleTex, 0);
    float4 volume6 = lightVolume6.SampleLevel(linearSampler, sampleTex, 0);
    
    LPVCell cell;
    cell.coeffs[0] = volume0.xyz;
    cell.coeffs[1] = volume1.xyz;
    cell.coeffs[2] = float3(volume1.w, volume2.xy);
    cell.coeffs[3] = float3(volume2.zw, volume3.x);
    cell.coeffs[4] = float3(volume3.yzw);
    cell.coeffs[5] = float3(volume4.xyz);
    cell.coeffs[6] = float3(volume4.w, volume5.xy);
    cell.coeffs[7] = float3(volume5.zw, volume6.x);
    cell.coeffs[8] = float3(volume6.yzw);
    
    return cell;
}

#endif