#ifndef VSMSHADOW_TSHADER
#define VSMSHADOW_TSHADER

#include "Common.tshader"
#include "ShadowCommon.tshader"
#include "VSMCommon.tshader"

float ComputeVSMShadow(float2 moments, float reciever)
{
  return ChebyshevUpperBound(moments, reciever, vsmBias * 0.01f, vsmReduceBlending);
}

float ComputeEVSM2Shadow(float2 moments, float reciever)
{
    float recieverWarp = WarpDepth2(reciever);
  
    float depthScale = vsmBias * 0.01f * EVSM_POS_EXPONENT * recieverWarp;
    float minVariance = depthScale * depthScale;
  
    float shadow = ChebyshevUpperBound(moments.xy, recieverWarp.x, minVariance, vsmReduceBlending);
  
    return shadow;
}

float ComputeEVSM4Shadow(float4 moments, float reciever)
{
    float2 recieverWarp = WarpDepth4(reciever);
    
    float2 depthScale = vsmBias * 0.01f * float2(EVSM_POS_EXPONENT, EVSM_NEG_EXPONENT) * recieverWarp;
    float2 minVariance = depthScale * depthScale;
    
    float shadowPos = ChebyshevUpperBound(moments.xy, recieverWarp.x, minVariance.x, vsmReduceBlending);
    float shadowNeg = ChebyshevUpperBound(moments.zw, recieverWarp.y, minVariance.y, vsmReduceBlending);
    float shadow = min(shadowPos, shadowNeg);
  
    return shadow;
}


float ComputeSpotLightShadow(float3 recieveWorldPos, float shadowNoise)
{
    float4 recieveShadowClipPos = mul(float4(recieveWorldPos, 1.0), shadowWorldToClipMatrix[0]);
    float shadowViewDepth = recieveShadowClipPos.w;
    recieveShadowClipPos /= recieveShadowClipPos.w;
    
    float2 shadowUV = recieveShadowClipPos.xy * float2(0.5, -0.5) + float2(0.5, 0.5);
    float reciever = (shadowViewDepth - shadowViewNear) / shadowViewLength;
    
    float4 moments = shadowMap.SampleLevel(vsmSampler, float3(shadowUV, 0), 0);
    
#if SHADOW_TECH == SHADOW_TECH_VSM
    return ComputeVSMShadow(moments.xy, reciever);
#elif SHADOW_TECH == SHADOW_TECH_EVSM2
    return ComputeEVSM2Shadow(moments.xy, reciever);
#elif SHADOW_TECH == SHADOW_TECH_EVSM4
    return ComputeEVSM4Shadow(moments, reciever);
#endif
}

float ComputePointLightShadow(float3 recieveWorldPos, float shadowNoise)
{
    float3 dir = recieveWorldPos - shadowPointLightPos;
    //float len = length(dir); 
    float3 absDir = abs(dir);
    
    float reciever = max(max(absDir.x, absDir.y), absDir.z) / shadowViewLength;
    
    float4 moments = shadowMapCube.SampleLevel(vsmSampler, dir, 0);
    
#if SHADOW_TECH == SHADOW_TECH_VSM
    return ComputeVSMShadow(moments.xy, reciever);
#elif SHADOW_TECH == SHADOW_TECH_EVSM2
    return ComputeEVSM2Shadow(moments.xy, reciever);
#elif SHADOW_TECH == SHADOW_TECH_EVSM4
    return ComputeEVSM4Shadow(moments, reciever);
#endif
}

float ComputeDirectionalLightShadow(float3 recieveWorldPos, float viewDepth, float shadowNoise)
{
    int cascadedSplitIndex = GetCascadedSplitIndex(viewDepth);
    
    float4 recieveShadowClipPos = mul(float4(recieveWorldPos, 1.0), shadowWorldToClipMatrix[cascadedSplitIndex]);
    
    float2 shadowUV = recieveShadowClipPos.xy * float2(0.5, -0.5) + float2(0.5, 0.5);
    float reciever = recieveShadowClipPos.z;
    
    float4 moments = shadowMap.SampleLevel(vsmSampler, float3(shadowUV, cascadedSplitIndex), 0);
    
#if SHADOW_TECH == SHADOW_TECH_VSM
    return ComputeVSMShadow(moments.xy, reciever);
#elif SHADOW_TECH == SHADOW_TECH_EVSM2
    return ComputeEVSM2Shadow(moments.xy, reciever);
#elif SHADOW_TECH == SHADOW_TECH_EVSM4
    return ComputeEVSM4Shadow(moments, reciever);
#endif
}

#endif