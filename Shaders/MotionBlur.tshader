#include "Common.tshader"
#include "DrawQuad.tshader"

#ifndef MAX_VELOCTYLENGTH
#define MAX_VELOCTYLENGTH 16
#endif

#ifndef MB_NUMSAMPLES
#define MB_NUMSAMPLES 16
#endif

Texture2D velocityTex;
Texture2D tileMaxTex;
Texture2D neighborMaxTex;
Texture2D linearDepthTex;
Texture2D sceneTex;

SamplerState pointSampler;

float velocityScale;
float4 texSize;
int frameCount;

float2 InitVelocityMapPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float2 rawVelocity = velocityTex.Load(int3(vsOut.pos.xy, 0)).xy;
    float2 velocity = rawVelocity * velocityScale;
    float len = length(velocity);
    velocity = velocity / (1e-5 + len) * max(0.5f, min(len, MAX_VELOCTYLENGTH));
    return velocity;
}


float2 TileMax(DrawQuadVSOut vsOut, float2 dir)
{
    float2 tileStart = (int2(vsOut.pos.xy) * dir * MAX_VELOCTYLENGTH + 0.5f + (vsOut.pos.xy - 0.5f) * (1.0f - dir)) * texSize.zw;
    
    float2 maxVel = 0.0f;
    float maxVelLen = 0.0f;
    [unroll] for(int i = 0; i < MAX_VELOCTYLENGTH; ++i)
    {
        float2 uv = tileStart + i * dir * texSize.zw;
        float2 vel = velocityTex.SampleLevel(pointSampler, uv, 0).xy;
        float len = length(vel);
        if(len > maxVelLen)
        {
            maxVel = vel;
            maxVelLen = len;
        }
    }
    
    return maxVel;
}

float2 TileMaxXPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    return TileMax(vsOut, float2(1.0f, 0.0f));
}

float2 TileMaxYPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    return TileMax(vsOut, float2(0.0f, 1.0f));
}


float2 NeighborMaxPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float2 maxVel = 0.0f;
    float maxVelLen = 0.0f;
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float2 uv = vsOut.uv + float2(x, y) * texSize.zw;
            float2 vel = tileMaxTex.SampleLevel(pointSampler, uv, 0).xy;
            float len = length(vel);
            if(len > maxVelLen)
            {
                maxVel = vel;
                maxVelLen = len;
            }
        }
    }
    
    return maxVel;
}


float Random(float scale, float2 pos)
{
    float magic = 3571.0;
    float2 rand = (1.0 / 4320.0) * pos + float2(0.25, 0);
    rand = frac( dot(rand * rand, magic) );
    rand = frac( dot(rand * rand, magic) );
    return -scale + 2.0 * scale * rand.x;
}

float CheckBoardDither(float scale, float2 pos)
{
    float2 mod = float2(uint2(pos) & 1);
    float dither = (-scale + 2.0f * scale * mod.x) * (-1.0f + 2.0f * mod.y) + 0.5 * scale * (-1.0 + 2.0 * (frameCount & 1));
    return dither;
}

float2 DepthCmp(float centerDepth, float sampleDepth, float depthScale)
{
    return saturate((centerDepth - sampleDepth) * float2(depthScale, -depthScale) + 0.5);
}

float4 SpreadCmp(float offsetLen, float2 spreadLen, float lenScale)
{
    //return saturate(spreadLen * spreadScale - offsetLen + 1.0f);
    float2 spreadLenScaled = spreadLen * lenScale;
    
    return saturate(1.0 - offsetLen.xxxx * rcp(spreadLenScaled.xyxy) + float4(0, 0, 0.95f, 0.95f));
}

float SampleWeight(
    float centerDepth,
    float sampleDepth,
    float depthScale,
    float centerSpreadLen,
    float sampleSpreadLen,
    float offsetLen,
    float lenScale,
    float2 dirWeight)
{
    float2 depthCmp = DepthCmp(centerDepth, sampleDepth, depthScale);
    float4 spreadCmp = SpreadCmp(offsetLen, float2(sampleSpreadLen, centerSpreadLen), lenScale);
    //float simBlur = Cylinder(offsetLen, centerSpreadLen) * Cylinder(offsetLen, sampleSpreadLen) * max(dirWeight.x, dirWeight.y) * 2.0f;
    return saturate( dot(depthCmp, spreadCmp.xy * dirWeight) + spreadCmp.z * spreadCmp.w * max(dirWeight.x, dirWeight.y) * 2.0f );
}
    
float Cone(float xyLen, float vLen)
{
    return saturate(vLen / xyLen);
}

float Cylinder(float xyLen, float vLen)
{
    return saturate(1.0 - smoothstep(0.95f * vLen, 1.05f * vLen, xyLen));
}

float SoftDepthCompare(float z0, float z1, float soft)
{
    return saturate((z0 - z1) / soft);
}
    
float3 MotionBlurPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float2 tileDitherPos = vsOut.pos.xy * (0.5 + 0.5 * (frameCount & 1));
    float2 tileDither = float2(Random(1.0f, tileDitherPos), Random(1.0f, tileDitherPos * 2.0));

    float2 vMax = neighborMaxTex.Load(int3((vsOut.pos.xy + tileDither) / MAX_VELOCTYLENGTH, 0)).xy;
    
    float3 color_c = sceneTex.SampleLevel(pointSampler, vsOut.uv, 0).xyz;
    float vMaxLen = length(vMax);
    if(vMaxLen <= 0.5f + 0.001f)
        return color_c;
        
    float2 dirMax = vMax / (vMaxLen + 0.0001f);
    float2 dirMaxT = float2(-dirMax.y, dirMax.x);
    float2 v_c = velocityTex.SampleLevel(pointSampler, vsOut.uv, 0).xy;
    if(dot(dirMaxT, v_c) < 0)
        dirMaxT = -dirMaxT;
    float vLen_c = max(0.5, length(v_c));
    float2 dir_c = v_c / (vLen_c + 0.0001f);
    float2 sampleDir1 = normalize( lerp( dirMaxT, dir_c, saturate((vLen_c - 0.5f) / 1.5f) ) );
    float2 sampleVec1 = sampleDir1 * vMaxLen;
    float2 sampleVec0 = vMax;
    
    float z_c = linearDepthTex.SampleLevel(pointSampler, vsOut.uv, 0).x;

    float weightSum = 0.0f;
    float3 colorSum = 0.0f;
    
    float sampleDither = CheckBoardDither(0.25f, vsOut.pos.xy);
    
    [unroll] for(uint i = 0; i <= MB_NUMSAMPLES; ++i)
    {
        if(i == MB_NUMSAMPLES / 2)
            continue;
        
        float t = lerp(-1.0f, 1.0f, float(i + sampleDither) / float(MB_NUMSAMPLES));
        float2 v = (i & 1) ? sampleVec0 : sampleVec1;
        float2 sampleDir = normalize(v);
        float2 xy = vsOut.pos.xy + t * v;
        float2 uv = xy * texSize.zw;
        float z_i = linearDepthTex.SampleLevel(pointSampler, uv, 0).x;
        
        float2 v_i = velocityTex.SampleLevel(pointSampler, uv, 0).xy;
        
        float vLen_i = max(0.5, length(v_i));
        
        float xyLen = length(xy - vsOut.pos.xy);
        
        float w_0 = (abs(dot(v_i / (vLen_i), sampleDir)));
        float w_1 = (abs(dot(dir_c, sampleDir)));
        
        float weight = SampleWeight(z_c, z_i, 200, vLen_c, vLen_i, xyLen, 1.0, float2(w_0, w_1));
        weight = saturate(weight * 10.0f);
        
        float3 color = sceneTex.SampleLevel(pointSampler, uv, 0).xyz;
        colorSum += weight * color;
        weightSum += weight;
    }
    
    weightSum /= MB_NUMSAMPLES;
    colorSum /= MB_NUMSAMPLES;
    colorSum = colorSum + saturate(1.0 - weightSum) * color_c;
    
    return colorSum;
}