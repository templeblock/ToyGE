#include "Common.tshader"
#include "DrawQuad.tshader"
#include "View.tshader"

#define POISSON_NUM_SAMPLES 9
#include "PoissonSampling.tshader"
    

Texture2D linearDepthTex;
Texture2D sceneTex;
Texture2D cocTex;

SamplerState pointSampler;
SamplerState linearSampler;

float focalDistance;
float focalAreaLength;
float nearAreaLength;
float farAreaLength;
float maxCoC;

float4 texSize;

int frameCount;

float ComputeCoCPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float z = linearDepthTex.SampleLevel(pointSampler, vsOut.uv, 0).x;
    float d = z * viewLength + viewNear;
    
    float coc = 0.0f;
    
    if(d > focalDistance)
        coc = -saturate( (d - focalDistance - focalAreaLength * 0.5f) / max(1e-4, farAreaLength)  ) * maxCoC;
    else
        coc =  saturate( (focalDistance - d - focalAreaLength * 0.5f) / max(1e-4, nearAreaLength) ) * maxCoC;
        
    return coc;
}

float2 downSampleOffset;

float DownSampleDepthPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float maxDepth = linearDepthTex.SampleLevel(pointSampler, vsOut.uv + downSampleOffset * float2(-1, -1), 0).x;

    maxDepth = max(maxDepth, linearDepthTex.SampleLevel(pointSampler, vsOut.uv + downSampleOffset * float2(1, -1), 0).x);
    maxDepth = max(maxDepth, linearDepthTex.SampleLevel(pointSampler, vsOut.uv + downSampleOffset * float2(-1, 1), 0).x);
    maxDepth = max(maxDepth, linearDepthTex.SampleLevel(pointSampler, vsOut.uv + downSampleOffset * float2(1, 1), 0).x);

    return maxDepth;
}

#define TILE_SIZE 16

Texture2D tileMaxInTex;

float2 TileMaxXPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float2 uvSample = vsOut.uv;
    float2 uvStep = float2(texSize.z, 0.0f);
    float maxCoC = (tileMaxInTex.SampleLevel(pointSampler, uvSample, 0).x);
    float minDepth = linearDepthTex.SampleLevel(pointSampler, uvSample, 0).x;

    [unroll] for(int i = 1; i < TILE_SIZE; ++i)
    {
        uvSample += uvStep;

        float cocSample = (tileMaxInTex.SampleLevel(pointSampler, uvSample, 0).x);
        maxCoC = max(maxCoC, cocSample);

        float depthSample = linearDepthTex.SampleLevel(pointSampler, uvSample, 0).x;
        minDepth = min(minDepth, depthSample);
    }

    return float2(maxCoC, minDepth);
}

float2 TileMaxYPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float2 uvSample = vsOut.uv;
    float2 uvStep = float2(0.0f, texSize.w);
    float2 tile = tileMaxInTex.SampleLevel(pointSampler, uvSample, 0).xy;
    float maxCoC = tile.x;
    float minDepth = tile.y;

    [unroll] for(int i = 1; i < TILE_SIZE; ++i)
    {
        uvSample += uvStep;

        // float cocSample = abs(tileMaxInTex.SampleLevel(pointSampler, uvSample, 0).x);
        // maxCoC = max(maxCoC, cocSample);

        // float depthSample = linearDepthTex.SampleLevel(pointSampler, uvSample, 0).x;
        // minDepth = min(minDepth, depthSample);

        float2 tileSample = tileMaxInTex.SampleLevel(pointSampler, uvSample, 0).xy;

        maxCoC = max(maxCoC, tileSample.x);
        minDepth = min(minDepth, tileSample.y);
    }
    
    return float2(maxCoC, minDepth);
}

Texture2D tileMaxTex;

float DepthWeight(float depth, float tileMinDepth)
{
    float weight = 1.0 - saturate((depth - tileMinDepth) / 0.01);
    return weight;
}

void PreDividingPS(
    DrawQuadVSOut vsOut,
    out float3 dividing : SV_TARGET0,
    out float3 downSampleColor : SV_TARGET1,
    out float  downSampleDepth : SV_TARGET2)
{

    float2 sampleUVs[4] = 
    {
        vsOut.uv + downSampleOffset * float2(-1, -1),
        vsOut.uv + downSampleOffset * float2( 1, -1),
        vsOut.uv + downSampleOffset * float2(-1,  1),
        vsOut.uv + downSampleOffset * float2( 1,  1)
    };

    float maxDepth = linearDepthTex.SampleLevel(pointSampler, sampleUVs[0], 0).x;
    float2 maxDepthSampleUV = sampleUVs[0];
    
    [unroll]for(int i = 1; i < 4; ++i)
    {
        float sampleDepth = linearDepthTex.SampleLevel(pointSampler, sampleUVs[i], 0).x;
        if(sampleDepth > maxDepth)
        {
            maxDepth = sampleDepth;
            maxDepthSampleUV = sampleUVs[i];
        }
    }
    downSampleDepth = maxDepth;

    float coc = cocTex.SampleLevel(pointSampler, maxDepthSampleUV, 0).x;

    // uint frameRandomSeed = ( ((uint)frameCount % 8) * 1551 ) & 15;
    // float frameRandom = (float)frameRandomSeed;
    // float noiseAngle = InterleavedGradientNoise(vsOut.pos.xy + frameRandom * 171, 1) * PI;
    // float2 sincosAngle = float2(sin(noiseAngle), cos(noiseAngle));
    // float2x2 rotMat = float2x2(
    //     sincosAngle.y, -sincosAngle.x,
    //     sincosAngle.x, sincosAngle.y
    // );

    //downSampleColor = sceneTex.SampleLevel(pointSampler, maxDepthSampleUV, 0).xyz;
    float weight = 1000.0;
    downSampleColor = sceneTex.SampleLevel(pointSampler, maxDepthSampleUV, 0).xyz * weight;

    [unroll] for(int j = 0; j < POISSON_NUM_SAMPLES; ++j)
    {
        float2 sampleOffset = GetPoissonSample(j) * coc;
        //sampleOffset = mul(rotMat, sampleOffset);

        float2 sampleUV = vsOut.uv + sampleOffset * texSize.zw;
        float sampleDepth = linearDepthTex.SampleLevel(pointSampler, sampleUV, 0).x;
        float3 sampleColor = sceneTex.SampleLevel(pointSampler, sampleUV, 0).xyz;
        float w = 1.0 / max(0.001, abs(maxDepth - sampleDepth) * 10);
        downSampleColor += sampleColor * w;
        weight += w; 
    }
    downSampleColor /= weight;

    float2 tile = tileMaxTex.SampleLevel(pointSampler, vsOut.uv, 0).xy;

    //float depth = linearDepthTex.SampleLevel(pointSampler, vsOut.uv, 0).x;

    coc = max(0.5, abs(coc));
    float cocWeight = 1 / (PI * coc * coc);
    float depthWeight = DepthWeight(maxDepth, tile.y);

    dividing = float3(coc, cocWeight * max(0.1, depthWeight), cocWeight * max(0.1, 1.0 - depthWeight));
}

Texture2D blurInTex;
Texture2D dividingTex;

#define DOF_NUM_SAMPLES 34

static const float2 dofBlurSamples[DOF_NUM_SAMPLES] = 
{
float2(0.0, 0.0),
float2(0.3057f, 0.6410f),
float2(-0.0096f, 0.7630f),
float2(0.0662f, 0.3546f),
float2(0.3969f, 0.3707f),
float2(0.7129f, 0.5890f),
float2(0.4217f, 0.8740f),
float2(0.7363f, 0.3275f),
float2(-0.2935f, 0.3323f),
float2(-0.0537f, -0.1244f),
float2(-0.2957f, 0.0425f),
float2(0.2934f, 0.0708f),
float2(-0.2459f, 0.5804f),
float2(-0.5432f, 0.2991f),
float2(-0.7109f, -0.0293f),
float2(-0.2124f, -0.3876f),
float2(-0.4671f, -0.3351f),
float2(0.5976f, 0.1100f),
float2(-0.9496f, 0.1137f),
float2(-0.7172f, 0.5474f),
float2(-0.9162f, -0.3578f),
float2(-0.5748f, -0.6685f),
float2(0.1792f, -0.2196f),
float2(-0.5649f, 0.7652f),
float2(-0.1958f, -0.8069f),
float2(0.1718f, -0.6019f),
float2(0.8599f, -0.1851f),
float2(0.5728f, -0.2717f),
float2(-0.2950f, 0.9046f),
float2(0.7910f, -0.4544f),
float2(0.4792f, -0.6400f),
float2(0.0891f, -0.9263f),
float2(0.4246f, -0.8991f),
float2(0.9281f, 0.1519f)
 
// float2(0.6949155f, 0.5252034f),
// float2(0.8369376f, 0.1395729f),
// float2(0.3956167f, 0.5688829f),
// float2(0.3422661f, 0.3580157f),
// float2(0.5116687f, 0.7979316f),
// float2(0.4998795f, 0.2160764f),
// float2(0.8759313f, 0.3944633f),
// float2(0.6809635f, -0.03856051f),
// float2(0.8491046f, -0.4140717f),
// float2(0.3065084f, -0.004693681f),
// float2(0.9425826f, -0.1943206f),
// float2(0.4006584f, -0.3178267f),
// float2(0.5860804f, -0.5946872f),
// float2(0.6221966f, -0.3865191f),
// float2(0.07949667f, -0.1484464f),
// float2(-0.06123248f, 0.1498779f),
// float2(0.2003031f, 0.1836387f),
// float2(0.1033274f, 0.398639f),
// float2(0.154118f, 0.6042101f),
// float2(0.37592f, -0.6206714f),
// float2(0.3811342f, -0.8551971f),
// float2(0.1566215f, -0.7943812f),
// float2(-0.002291272f, -0.5599172f),
// float2(-0.3533187f, 0.4390593f),
// float2(-0.2483554f, -0.1887538f),
// float2(-0.474822f, 0.1513222f),
// float2(-0.07840693f, 0.5321035f),
// float2(-0.6309387f, 0.4094703f),
// float2(-0.5324524f, 0.7009451f),
// float2(-0.2765627f, 0.6585442f),
// float2(-0.1217203f, -0.365814f),
// float2(-0.2115377f, -0.6487787f),
// float2(-0.1033678f, -0.9324811f),
// float2(0.1945231f, -0.4191461f),
// float2(-0.4011108f, -0.4472034f),
// float2(0.2110277f, 0.9245639f),
// float2(-0.5153359f, -0.2534649f),
// float2(-0.3500341f, 0.8951461f),
// float2(-0.8559286f, -0.4762026f),
// float2(-0.894389f, -0.1121687f),
// float2(-0.5879417f, -0.6392199f),
// float2(-0.7614948f, 0.07620434f),
// float2(-0.3797887f, -0.8179687f),
// float2(-0.8990605f, 0.2906051f),
// float2(-0.7237834f, -0.3098449f),
// float2(-0.01935404f, 0.7940541f),
// float2(-0.2597689f, 0.234831f),
// float2(-0.2970954f, 0.02063354f),
// float2(-0.8207827f, 0.5092491f)
};



void DOFBlurPS(
    DrawQuadVSOut vsOut,
    out float3 color : SV_TARGET0,
    out float alpha : SV_TARGET1)
{
    float tileMax = tileMaxTex.SampleLevel(pointSampler, vsOut.uv, 0).x;
    tileMax = max(0.5, abs(tileMax));

    float centerCoC = (cocTex.SampleLevel(pointSampler, vsOut.uv, 0).x);
    //centerCoC = max(centerCoC, 0.5);

    tileMax = max(max(0.5, abs(centerCoC)), tileMax);

    //tileMax *= 0.5;

    float4 foreground = 0.0f;
    float4 background = 0.0f;

    uint frameRandomSeed = ( ((uint)frameCount % 8) * 1551 ) & 15;
    float frameRandom = (float)frameRandomSeed;
    float noiseAngle = InterleavedGradientNoise(vsOut.pos.xy + frameRandom * 171, 1) * PI;
    float2 sincosAngle = float2(sin(noiseAngle), cos(noiseAngle));
    float2x2 rotMat = float2x2(
        sincosAngle.y, -sincosAngle.x,
        sincosAngle.x, sincosAngle.y
    );

    for(int i = 0; i < DOF_NUM_SAMPLES; ++i)
    {
        float2 sampleOffset = dofBlurSamples[i] * tileMax;
        //float2 sampleOffset = GetPoissonSample(i) * tileMax;
        sampleOffset = mul(rotMat, sampleOffset);
        float2 sampleUV = vsOut.uv + sampleOffset * texSize.zw * 0.5;

        float3 sampleDividing = dividingTex.SampleLevel(pointSampler, sampleUV, 0).xyz;
        float3 sampleColor = blurInTex.SampleLevel(pointSampler, sampleUV, 0).xyz;

        float sampleCoC = sampleDividing.x;
        float coverageWeight = sampleCoC * sampleCoC >= dot(sampleOffset, sampleOffset) ? 1.0 : 0.0;
        
        foreground += float4(sampleColor, 1) * coverageWeight * sampleDividing.y;
        background += float4(sampleColor, 1) * coverageWeight * sampleDividing.z;
    }
    foreground.xyz /= max(1e-6f, foreground.w);
    background.xyz /= max(1e-6f, background.w);

    //foreground *= PI * tileMax * tileMax / DOF_NUM_SAMPLES;
    //background *= PI * tileMax * tileMax / DOF_NUM_SAMPLES;
    alpha = saturate(foreground.w * PI * tileMax * tileMax / DOF_NUM_SAMPLES );

    color = lerp(background.xyz, foreground.xyz, alpha);
    //color = foreground.xyz;
}

Texture2D halfResColorTex;
Texture2D halfResAlphaTex;

float3 DOFUpSamplingPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float coc = abs(cocTex.SampleLevel(pointSampler, vsOut.uv, 0).x);
    float3 fullResColor = sceneTex.SampleLevel(pointSampler, vsOut.uv, 0).xyz;

    // uint frameRandomSeed = ( ((uint)frameCount % 8) * 1551 ) & 15;
    // float frameRandom = (float)frameRandomSeed;
    // float noiseAngle = InterleavedGradientNoise(vsOut.pos.xy + frameRandom * 171, 1) * PI;
    // float2 sincosAngle = float2(sin(noiseAngle), cos(noiseAngle));
    // float2x2 rotMat = float2x2(
    //     sincosAngle.y, -sincosAngle.x,
    //     sincosAngle.x, sincosAngle.y
    // );

    [unroll] for(int i = 0; i < POISSON_NUM_SAMPLES; ++i)
    {
        float2 sampleOffset = GetPoissonSample(i) * coc;
        //sampleOffset = mul(rotMat, sampleOffset);

        float2 sampleUV = vsOut.uv + sampleOffset * texSize.zw;
        float3 sampleColor = sceneTex.SampleLevel(linearSampler, sampleUV, 0).xyz;
        fullResColor += sampleColor; 
    }
    fullResColor /= POISSON_NUM_SAMPLES + 1;

    float maxCoC = abs(tileMaxTex.SampleLevel(pointSampler, vsOut.uv, 0).x);
    maxCoC = max(coc, maxCoC);

    float3 halfResColor = halfResColorTex.SampleLevel(linearSampler, vsOut.uv, 0).xyz;
    float halfResAlpha = halfResAlphaTex.SampleLevel(linearSampler, vsOut.uv, 0).x;

    float combineFactor = saturate( lerp(coc, maxCoC, halfResAlpha) );

    //float3 finalColor = lerp(halfResColor, fullResColor, combineFactor);
    float3 finalColor = lerp(fullResColor, halfResColor, saturate(maxCoC / 6));
    return finalColor;
}