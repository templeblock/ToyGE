#include "Common.tshader"
#include "DrawQuad.tshader"
#include "View.tshader"
#include "BilateralFilterCommon.tshader"

#ifdef AO_FULL_RES
    #define AO_NUM_SAMPLES 3
#else
    #define AO_NUM_SAMPLES 5
#endif
#define POISSON_NUM_SAMPLES AO_NUM_SAMPLES

#include "PoissonSampling.tshader"

Texture2D normalTex;
Texture2D depthTex;

Texture2D preMipNormalTex;
Texture2D preMipDepthTex;

Texture2D aoTex;

SamplerState pointClampSampler;
SamplerState linearSampler;

float4 texSize;
float invViewRatio;

float aoPower;
float aoIntensity;
float aoRadius; 
uint frameCount;

// float GetDepthDiffWeight(float d0, float d1)
// {
//     float d = 0.2 / viewLength;
//     return saturate( (d - abs(d0 - d1)) / d );
//     //return 0.1 / viewLength / (1e-5 + abs(d0 - d1));
// }

void DownSampleNormalDepthPS(
    DrawQuadVSOut vsOut,
    out float3 outNormal : SV_TARGET0,
    out float outDepth : SV_TARGET1)
{
    float2 uvTable[4] = 
    {
        vsOut.uv + float2(-0.5, -0.5) * texSize.zw,
        vsOut.uv + float2( 0.5, -0.5) * texSize.zw,
        vsOut.uv + float2(-0.5,  0.5) * texSize.zw,
        vsOut.uv + float2( 0.5,  0.5) * texSize.zw
    };
    
    float samplesDepth[4];
    [unroll] for(int i0 = 0; i0 < 4; ++i0)
    {
        samplesDepth[i0] = depthTex.SampleLevel(pointClampSampler, uvTable[i0], 0).x;
    }
    
    float depthSort[4];
    [unroll] for(int i1 = 0; i1 < 3; ++i1)
    {
        float minDepth = samplesDepth[i1];
        [unroll] for(int j = i1 + 1; j < 4; ++j)
        {
            if(samplesDepth[j] < minDepth)
            {
                samplesDepth[i1] = samplesDepth[j];
                samplesDepth[j] = minDepth;
                minDepth = samplesDepth[i1];
            }
        }
        depthSort[i1] = minDepth;
    }
    outDepth = max( max(samplesDepth[0], samplesDepth[1]), max(samplesDepth[2], samplesDepth[3]) );
    
    float3 normalSum = 0.0f;
    float weightSum = 0.0f;
        
    [unroll] for(int i2 = 0; i2 < 4; ++i2)
    {
        float3 sampleNormal = normalTex.SampleLevel(pointClampSampler, uvTable[i2], 0).xyz;
        sampleNormal = DecodeNormal(sampleNormal);//normalize(sampleNormal * 2 - 1);
        float depthDiffWeight = GetDepthDiffWeight(samplesDepth[i2], outDepth, 0.2 / viewLength);
        
        normalSum += sampleNormal * depthDiffWeight;
        weightSum += depthDiffWeight;
    }
    
    outNormal = normalize(normalSum / weightSum);//(normalize(normalSum / weightSum) + 1) * 0.5;
    outNormal = EncodeNormal(outNormal);
}



float2 RotateSample(float2 v, float angle)
{
  float cosAngle = cos(angle);
  float sinAngle = sin(angle);
  float2x2 rotateMat = {cosAngle, sinAngle, -sinAngle, cosAngle};
  return mul(v, rotateMat);
}

float ComputeSampleAO(
    float3 sampleViewPos, 
    float3 centerViewPos, 
    float3 centerViewNormal, 
    float2 sampleUV)
{
// /*
//   float3 vec = samplePosV - centerPosV;
//   float vecLen = length(vec);
//   
//   //float bias = 0.8f;
//   
//   ao = 1.0 - saturate( dot(vec, centerNormalV) / max(1e-3, length(vec)) );
//   
//   float r = vecLen/aoRadius;
//   //weight = saturate( 1 + (samplePosV.z - centerPosV.z) / aoRadius );// * saturate(1 - vecLen/aoRadius);
//   weight = saturate(1 - r * r);
//   
//   weight *= any( abs(sampleUV - 0.5) < 0.5 );
//   
//   ao = ao * ao;
//   ao *= weight;
// */
  
    float3 vec = sampleViewPos - centerViewPos;
    float r = length(vec);
    
    float ao = saturate( dot(vec, centerViewNormal) / max(1e-6, r) );
    
    r /= aoRadius;
    ao *= saturate(1 - r * r);
    
    return ao;
    
    //ao *= ao;
    
    // weight = 1.0f;
}

float ComputeUpSampledAO(float2 centerPosS, float centerZ, float3 centerNormalW)
{
    float4 bilinearWeights;
    float2 samplesPos[4];
    GetBilateralUpSamplingCoords(centerPosS, samplesPos, bilinearWeights);
    
    float aoSum = 0.0f;
    float weightSum = 0.0f;
    
    [unroll] for(int i = 0; i < 4; ++i)
    {
        float2 sampleUV = samplesPos[i] * texSize.zw * 2.0;
        
        float sampleAO = aoTex.SampleLevel(linearSampler, sampleUV, 0).x;
        
        float sampleZ = preMipDepthTex.SampleLevel(linearSampler, sampleUV, 0).x;
        float depthDiffW = GetDepthDiffWeight(sampleZ, centerZ, 0.2 / viewLength);
        
        float3 sampleNormal = preMipNormalTex.SampleLevel(linearSampler, sampleUV, 0).xyz;
        sampleNormal = DecodeNormal(sampleNormal);//normalize(sampleNormal * 2 - 1);
        float normalDiffW = saturate(dot(sampleNormal, centerNormalW));
        
        float weight = bilinearWeights[i] * depthDiffW;// * normalDiffW;
        
        weight = max(1e-5, weight);
        
        aoSum += sampleAO * weight;
        weightSum += weight;
    }
    
    return aoSum / weightSum;
}
  
float RenderAOPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    float centerZ = depthTex.Load(int3(vsOut.pos.xy, 0)).x;
    if(centerZ >= 0.99f)
        return 1.0f;
    
    float2 centerClipPosXY = GetClipPosXYFromScreen(vsOut.pos.xy, texSize.xy);
    float3 centerViewPos = GetViewPosFromLinear(float3(centerClipPosXY, centerZ), viewToClipMatrix, viewNear, viewFar);
    
    float3 centerWorldNormal = normalTex.Load(int3(vsOut.pos.xy, 0)).xyz;
    centerWorldNormal = DecodeNormal(centerWorldNormal);//normalize(centerNormalW * 2.0 - 1.0);
    
    float aoSum = 1.0;
    
#if AO_NUM_SAMPLES > 0
    float3 centerViewNormal = mul(centerWorldNormal, (float3x3)worldToViewMatrix);
    
    float bias = 0.01f;
    centerViewPos += centerViewNormal * bias;
    
    float centerDepth = centerZ * viewLength + viewNear;
    
    float2 aoRadiusH;
    aoRadiusH = aoRadius / centerDepth;
    //aoRadiusH.y *= invViewRatio;
    float2 aoRadiusUV = aoRadiusH * 0.5;
    
    uint frameRandomSeed = ( ((uint)frameCount % 8) * 1551 ) & 15;
    float frameRandom = (float)frameRandomSeed;
    float rotateAngle = PI * InterleavedGradientNoise(vsOut.pos.xy + frameRandom * 171, 1.0);
    
    aoSum = 0.0;
    float weightSum = 0.0;
    
    [unroll] for(int i = 0; i < AO_NUM_SAMPLES; ++i)
    {
        float2 sampleOffsetUV = aoRadiusUV * RotateSample(GetPoissonSample(i), rotateAngle);
        //[branch] if( length(sampleOffsetUV * texSize.xy) < 1)
        //  continue;
        
        float2 sampleUV0 = vsOut.uv + sampleOffsetUV;
        float2 sampleUV1 = vsOut.uv - sampleOffsetUV;
        
        float sampleZ0 = depthTex.SampleLevel(linearSampler, sampleUV0, 0).x;
        float sampleZ1 = depthTex.SampleLevel(linearSampler, sampleUV1, 0).x;
        
        float2 sampleClipPosXY0 = sampleUV0 * float2(2.0, -2.0) + float2(-1.0, 1.0);
        float2 sampleClipPosXY1 = sampleUV1 * float2(2.0, -2.0) + float2(-1.0, 1.0);
        
        float3 sampleViewPos0 = GetViewPosFromLinear(float3(sampleClipPosXY0, sampleZ0), viewToClipMatrix, viewNear, viewFar);
        float3 sampleViewPos1 = GetViewPosFromLinear(float3(sampleClipPosXY1, sampleZ1), viewToClipMatrix, viewNear, viewFar);
        
        float ao;
        float weight;
        
        float ao0 = ComputeSampleAO(sampleViewPos0, centerViewPos, centerViewNormal, sampleUV0);
        aoSum += ao0;
        //weightSum += weight;
        
        float ao1 = ComputeSampleAO(sampleViewPos1, centerViewPos, centerViewNormal, sampleUV1);
        aoSum += ao1;
        
        //aoSum += max(ao0, ao1);
        //weightSum += weight;
    }
    
    // /*
    // if(weightSum < 1e-4)
    //     aoSum = 1.0;
    // else
    //     aoSum = saturate( aoSum / weightSum );
    // */
    
    aoSum /= AO_NUM_SAMPLES * 2;
    
    aoSum = saturate(1.0 - aoSum);
#endif
    
    float aoResult = aoSum;
    
#ifdef AO_UPSAMPLING
    float upSampledAO = ComputeUpSampledAO(vsOut.pos.xy, centerZ, centerWorldNormal);
    float aoMipBlend = 0.5;
    aoResult = lerp(aoSum, upSampledAO, aoMipBlend);
    //aoResult = min(aoSum, upSampledAO);
#endif

#ifdef AO_FULL_RES
    float power = 10.0f;
    float intensity = 0.5f;
    float fadeDistance = 10.0f;
    
    aoResult = saturate( 1.0 - (1.0 - pow(abs(aoResult), aoPower)) * aoIntensity );
    aoResult = lerp(1.0, aoResult, saturate(4.0 - (centerViewPos.z / fadeDistance) * 4));
#endif
    
    return aoResult;
}

Texture2D blurInTex;

#define BLUR_RADIUS 3

// cbuffer cb_gaussweights
// {
//     float4 gaussWeightsTable[ (BLUR_RADIUS * 2 + 1 + 3) / 4]
// };

float CrossBilateralBlur(DrawQuadVSOut vsOut, float2 dir)
{
    float2 centerUV = vsOut.uv;
    
    //float epison = 1e-4;
    
    //float gaussWeights[BLUR_RADIUS + 1] = (float[BLUR_RADIUS + 1])gaussWeightsTable;
    
    //float weightSum = gaussWeights[0] * 1.0 / epison;
    float weightSum = 1.0;
    float resultSum = blurInTex.SampleLevel(pointClampSampler, centerUV, 0).x * weightSum;
    
    float centerZ = depthTex.SampleLevel(pointClampSampler, centerUV, 0).x;
    
    float2 uvStep = texSize.zw * dir;
    float2 uvOffset = uvStep;
        
    int r = 1;
    
    [unroll] for(; r <= BLUR_RADIUS/2; ++r)
    {
    
        {
            float2 uv = centerUV + uvOffset;
            
            float sampleZ = depthTex.SampleLevel(pointClampSampler, uv, 0).x;
            float zDiffW = GetDepthDiffWeight(sampleZ, centerZ, 0.2 / viewLength);
            
            float w = zDiffW;
            
            float sampleColor = blurInTex.SampleLevel(pointClampSampler, uv, 0).x;
            
            resultSum += sampleColor * w;
            weightSum += w;
        }
    
        {
            float2 uv = centerUV - uvOffset;
        
            float sampleZ = depthTex.SampleLevel(pointClampSampler, uv, 0).x;
            float zDiffW = GetDepthDiffWeight(sampleZ, centerZ, 0.2 / viewLength);
        
            float w = zDiffW;
        
            float sampleColor = blurInTex.SampleLevel(pointClampSampler, uv, 0).x;
        
            resultSum += sampleColor * w;
            weightSum += w;
        }
        
        uvOffset += uvStep;
    }
    
    ++r;
    uvOffset += 0.5 * uvStep;
    uvStep *= 2.0;
    
    [unroll] for(; r <= BLUR_RADIUS; ++r)
    {
    
        {
            float2 uv = centerUV + uvOffset;
            
            float sampleZ = depthTex.SampleLevel(pointClampSampler, uv, 0).x;
            float zDiffW = GetDepthDiffWeight(sampleZ, centerZ, 0.2 / viewLength);
            
            float w = zDiffW;
            
            float sampleColor = blurInTex.SampleLevel(pointClampSampler, uv, 0).x;
            
            resultSum += sampleColor * w;
            weightSum += w;
        }
    
        {
            float2 uv = centerUV - uvOffset;
        
            float sampleZ = depthTex.SampleLevel(pointClampSampler, uv, 0).x;
            float zDiffW = GetDepthDiffWeight(sampleZ, centerZ, 0.2 / viewLength);
        
            float w = zDiffW;
        
            float sampleColor = blurInTex.SampleLevel(pointClampSampler, uv, 0).x;
        
            resultSum += sampleColor * w;
            weightSum += w;
        }
        
        uvOffset += uvStep;
    }
    
    resultSum /= weightSum;
    
    return resultSum;
}

float CrossBilateralBlurXPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    return CrossBilateralBlur(vsOut, float2(1.0, 0.0));
}
    
float CrossBilateralBlurYPS(DrawQuadVSOut vsOut) : SV_TARGET
{
    return CrossBilateralBlur(vsOut, float2(0.0, 1.0));
}


float4 CombineAOPS(DrawQuadVSOut vsOut) : SV_TARGET
{
  float4 outColor = 0.0f;
  
  float ao = aoTex.Load(int3(vsOut.pos.xy, 0)).x;
  
  outColor.a = ao;
  
  return outColor;
}