#ifndef SHADOWCOMMON_TSHADER
#define SHADOWCOMMON_TSHADER

#ifndef NUM_SHADOW_VIEWS
#define NUM_SHADOW_VIEWS 1
#endif

#define CASCADED_MAX_SPLITS 4
#ifndef CASCADED_NUM_SPLITS
#define CASCADED_NUM_SPLITS CASCADED_MAX_SPLITS
#endif

cbuffer cb_shadowView_shared
{
    float4x4 shadowWorldToViewMatrix[NUM_SHADOW_VIEWS];
    float4x4 shadowViewToClipMatrix[NUM_SHADOW_VIEWS];
    float4x4 shadowWorldToClipMatrix[NUM_SHADOW_VIEWS];
    float    shadowViewNear;
    float    shadowViewFar;
    float    shadowViewLength; // far - near
    float    _shadowpad_1;
    float2   shadowViewSize;
    float2   shadowInvViewSize;
};

cbuffer cb_pointShadow
{
    float3 shadowPointLightPos;
};

cbuffer cb_cascadedShadow
{
    float4 cascadedSplits[(CASCADED_MAX_SPLITS + 1 + 3)/4];
    float4 cascadedShadowViewNear[(CASCADED_MAX_SPLITS + 3)/4];
    float4 cascadedShadowViewFar[(CASCADED_MAX_SPLITS + 3)/4];
    float4 cascadedShadowViewLength[(CASCADED_MAX_SPLITS + 3)/4];
};

Texture2DArray shadowMap;
TextureCube shadowMapCube;

int GetCascadedSplitIndex(float viewDepth)
{
    float splits[CASCADED_NUM_SPLITS + 1] = (float[CASCADED_NUM_SPLITS + 1])cascadedSplits;
    
    int index = -1;
    [unroll] for(int splitIndex = 0; splitIndex < CASCADED_NUM_SPLITS; ++splitIndex)
    {
        if(viewDepth >= splits[splitIndex] &&
           viewDepth <= splits[splitIndex + 1])
        {
            index = splitIndex;
            break;
        }
    }

    return index;
}

#endif