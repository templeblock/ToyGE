#include "ToyGE\D3D11\D3D11Util.h"

namespace ToyGE
{
	D3D11_COMPARISON_FUNC GetD3DComparisonFunc(ComparisonFuc func)
	{
		switch (func)
		{
		case COMPARISON_NEVER:
			return D3D11_COMPARISON_NEVER;

		case COMPARISON_LESS:
			return D3D11_COMPARISON_LESS;

		case COMPARISON_EQUAL:
			return D3D11_COMPARISON_EQUAL;

		case COMPARISON_LESS_EQUAL:
			return D3D11_COMPARISON_LESS_EQUAL;

		case COMPARISON_GREATER:
			return D3D11_COMPARISON_GREATER;

		case COMPARISON_NOT_EQUAL:
			return D3D11_COMPARISON_NOT_EQUAL;

		case COMPARISON_GREATER_EQUAL:
			return D3D11_COMPARISON_GREATER_EQUAL;

		case COMPARISON_ALWAYS:
			return D3D11_COMPARISON_ALWAYS;

		default:
			return D3D11_COMPARISON_NEVER;
		}
	}

	D3D11_BLEND GetD3DBlend(BlendParam blend)
	{
		switch (blend)
		{
		case BLEND_PARAM_ZERO:
			return D3D11_BLEND_ZERO;

		case BLEND_PARAM_ONE:
			return D3D11_BLEND_ONE;

		case BLEND_PARAM_SRC_COLOR:
			return D3D11_BLEND_SRC_COLOR;

		case BLEND_PARAM_INV_SRC_COLOR:
			return D3D11_BLEND_INV_SRC_COLOR;

		case BLEND_PARAM_SRC_ALPHA:
			return D3D11_BLEND_SRC_ALPHA;

		case BLEND_PARAM_INV_SRC_ALPHA:
			return D3D11_BLEND_INV_SRC_ALPHA;

		case BLEND_PARAM_DEST_ALPHA:
			return D3D11_BLEND_DEST_ALPHA;

		case BLEND_PARAM_INV_DEST_ALPHA:
			return D3D11_BLEND_INV_DEST_ALPHA;

		case BLEND_PARAM_DEST_COLOR:
			return D3D11_BLEND_DEST_COLOR;

		case BLEND_PARAM_INV_DEST_COLOR:
			return D3D11_BLEND_INV_DEST_COLOR;

		case BLEND_PARAM_SRC_ALPHA_SAT:
			return D3D11_BLEND_SRC_ALPHA_SAT;

		case BLEND_PARAM_BLEND_FACTOR:
			return D3D11_BLEND_BLEND_FACTOR;

		case BLEND_PARAM_INV_BLEND_FACTOR:
			return D3D11_BLEND_INV_BLEND_FACTOR;

		case BLEND_PARAM_SRC1_COLOR:
			return D3D11_BLEND_SRC1_COLOR;

		case BLEND_PARAM_INV_SRC1_COLOR:
			return D3D11_BLEND_INV_SRC1_COLOR;

		case BLEND_PARAM_SRC1_ALPHA:
			return D3D11_BLEND_SRC1_ALPHA;

		case BLEND_PARAM_INV_SRC1_ALPHA:
			return D3D11_BLEND_INV_SRC1_ALPHA;

		default:
			return D3D11_BLEND_ZERO;
		}
	}

	D3D11_BLEND_OP GetD3DBlendOP(BlendOperation blendOP)
	{
		switch (blendOP)
		{
		case BLEND_OP_ADD:
			return D3D11_BLEND_OP_ADD;

		case BLEND_OP_SUBTRACT:
			return D3D11_BLEND_OP_SUBTRACT;

		case BLEND_OP_REV_SUBTRACT:
			return D3D11_BLEND_OP_REV_SUBTRACT;

		case BLEND_OP_MIN:
			return D3D11_BLEND_OP_MIN;

		case BLEND_OP_MAX:
			return D3D11_BLEND_OP_MAX;

		default:
			return D3D11_BLEND_OP_ADD;
		}
	}

	uint8_t GetD3DColorWriteMask(uint8_t mask)
	{
		uint8_t ret = 0;
		if (mask & COLOR_WRITE_R)
			ret |= D3D11_COLOR_WRITE_ENABLE_RED;
		if (mask & COLOR_WRITE_G)
			ret |= D3D11_COLOR_WRITE_ENABLE_GREEN;
		if (mask & COLOR_WRITE_B)
			ret |= D3D11_COLOR_WRITE_ENABLE_BLUE;
		if (mask & COLOR_WRITE_A)
			ret |= D3D11_COLOR_WRITE_ENABLE_ALPHA;

		return ret;
	}

	D3D11_DEPTH_WRITE_MASK GetD3DDepthWriteMask(DepthWriteMask mask)
	{
		switch (mask)
		{
		case ToyGE::DEPTH_WRITE_ZERO:
			return D3D11_DEPTH_WRITE_MASK_ZERO;

		case ToyGE::DEPTH_WRITE_ALL:
			return D3D11_DEPTH_WRITE_MASK_ALL;

		default:
			return D3D11_DEPTH_WRITE_MASK_ZERO;
		}
	}

	D3D11_STENCIL_OP GetD3DStencilOP(StencilOperation op)
	{
		switch (op)
		{
		case ToyGE::STENCIL_OP_KEEP:
			return D3D11_STENCIL_OP_KEEP;

		case ToyGE::STENCIL_OP_ZERO:
			return D3D11_STENCIL_OP_ZERO;

		case ToyGE::STENCIL_OP_REPLACE:
			return D3D11_STENCIL_OP_REPLACE;

		case ToyGE::STENCIL_OP_INCR_SAT:
			return D3D11_STENCIL_OP_INCR_SAT;

		case ToyGE::STENCIL_OP_DECR_SAT:
			return D3D11_STENCIL_OP_DECR_SAT;

		case ToyGE::STENCIL_OP_INVERT:
			return D3D11_STENCIL_OP_INVERT;

		case ToyGE::STENCIL_OP_INCR:
			return D3D11_STENCIL_OP_INCR;

		case ToyGE::STENCIL_OP_DECR:
			return D3D11_STENCIL_OP_DECR;

		default:
			return D3D11_STENCIL_OP_KEEP;
		}
	}

	D3D11_FILL_MODE GetD3DFillMode(FillMode mode)
	{
		switch (mode)
		{
		case ToyGE::FILL_WIREFRAME:
			return D3D11_FILL_WIREFRAME;

		case ToyGE::FILL_SOLID:
			return D3D11_FILL_SOLID;

		default:
			return D3D11_FILL_SOLID;
		}
	}

	D3D11_CULL_MODE GetD3DCullMode(CullMode mode)
	{
		switch (mode)
		{
		case CULL_NONE:
			return D3D11_CULL_NONE;

		case CULL_FRONT:
			return D3D11_CULL_FRONT;

		case CULL_BACK:
			return D3D11_CULL_BACK;

		default:
			return D3D11_CULL_BACK;
		}
	}

	D3D11_FILTER GetD3DFilter(Filter filter)
	{
		switch (filter)
		{
		case FILTER_MIN_MAG_MIP_POINT:
			return D3D11_FILTER_MIN_MAG_MIP_POINT;
		case FILTER_MIN_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR;
		case FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT;
		case FILTER_MIN_POINT_MAG_MIP_LINEAR:
			return D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR;
		case FILTER_MIN_LINEAR_MAG_MIP_POINT:
			return D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT;
		case FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
		case FILTER_MIN_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT;
		case FILTER_MIN_MAG_MIP_LINEAR:
			return D3D11_FILTER_MIN_MAG_MIP_LINEAR;
		case FILTER_ANISOTROPIC:
			return D3D11_FILTER_ANISOTROPIC;
		case FILTER_COMPARISON_MIN_MAG_MIP_POINT:
			return D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT;
		case FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR;
		case FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT;
		case FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR:
			return D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR;
		case FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT:
			return D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT;
		case FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
		case FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
		case FILTER_COMPARISON_MIN_MAG_MIP_LINEAR:
			return D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR;
		case FILTER_COMPARISON_ANISOTROPIC:
			return D3D11_FILTER_COMPARISON_ANISOTROPIC;
		case FILTER_MINIMUM_MIN_MAG_MIP_POINT:
			return D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT;
		case FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR;
		case FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
		case FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR:
			return D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR;
		case FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT:
			return D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT;
		case FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
		case FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT;
		case FILTER_MINIMUM_MIN_MAG_MIP_LINEAR:
			return D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR;
		case FILTER_MINIMUM_ANISOTROPIC:
			return D3D11_FILTER_MINIMUM_ANISOTROPIC;
		case FILTER_MAXIMUM_MIN_MAG_MIP_POINT:
			return D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT;
		case FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR;
		case FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
		case FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR:
			return D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR;
		case FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT:
			return D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT;
		case FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
			return D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
		case FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT:
			return D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT;
		case FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR:
			return D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR;
		case FILTER_MAXIMUM_ANISOTROPIC:
			return D3D11_FILTER_MAXIMUM_ANISOTROPIC;
		default:
			return D3D11_FILTER_MIN_MAG_MIP_LINEAR;
		}
	}

	D3D11_TEXTURE_ADDRESS_MODE GetD3DTextureAddressMode(TextureAddressMode mode)
	{
		switch (mode)
		{
		case TEXTURE_ADDRESS_WRAP:
			return D3D11_TEXTURE_ADDRESS_WRAP;
		case TEXTURE_ADDRESS_MIRROR:
			return D3D11_TEXTURE_ADDRESS_MIRROR;
		case TEXTURE_ADDRESS_CLAMP:
			return D3D11_TEXTURE_ADDRESS_CLAMP;
		case TEXTURE_ADDRESS_BORDER:
			return D3D11_TEXTURE_ADDRESS_BORDER;
		case TEXTURE_ADDRESS_MIRROR_ONCE:
			return D3D11_TEXTURE_ADDRESS_MIRROR_ONCE;
		default:
			return D3D11_TEXTURE_ADDRESS_CLAMP;
		}
	}

	D3D11_PRIMITIVE_TOPOLOGY GetD3DPrimitiveTopology(PrimitiveTopology topology)
	{
		switch (topology)
		{
		case PRIMITIVE_TOPOLOGY_UNDEFINED:
			return D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED;
		case PRIMITIVE_TOPOLOGY_POINTLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_POINTLIST;
		case PRIMITIVE_TOPOLOGY_LINELIST:
			return D3D11_PRIMITIVE_TOPOLOGY_LINELIST;
		case PRIMITIVE_TOPOLOGY_LINESTRIP:
			return D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP;
		case PRIMITIVE_TOPOLOGY_TRIANGLELIST:
			return D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
		case PRIMITIVE_TOPOLOGY_TRIANGLESTRIP:
			return D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP;
		case PRIMITIVE_TOPOLOGY_LINELIST_ADJ:
			return D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ;
		case PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ:
			return D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ;
		case PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ:
			return D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ;
		case PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ:
			return D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ;
		case PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST;
		case PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST:
			return D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST;
		default:
			return D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED;
		}
	}
}