<?xml version="1.0" encoding="utf-8"?>

<effect>
  <include name="PostProcess.xml"/>
  <include name="CommonState.xml"/>
  
  <variable type="Texture2D" name="sceneTex"/>
  <variable type="Texture2D" name="linearDepthTex"/>

  <shader>
    <![CDATA[
    
float4 StartupPS(PostProcessVSOut vsOut) : SV_TARGET
{
    float4 color = sceneTex.SampleLevel(samplerPoint, vsOut.tex, 0);
    float depth = linearDepthTex.SampleLevel(samplerPoint, vsOut.tex, 0).x;
  
    if(depth <= 0.99f)
      color = 0.0f;
    
    return color;
}
    
    ]]>
  </shader>

  <technique name='Startup'>
    <pass>
      <state value='disableDepth'/>
      <vs entry='PostProcessVS'/>
      <ps entry='StartupPS'/>
    </pass>
  </technique>
  

  
  <variable type="Texture2D" name="radialBlurInTex"/>
  
  <variable type="cbuffer" name="cb_raidalBlur">
    <variable type="float2" name="lightPosUV"/>
  </variable>
  
  <shader>
    <![CDATA[

#define NUM_SAMPLES 25
  
float4 RadialBlurPS(PostProcessVSOut vsOut) : SV_TARGET
{
  float density = 0.5f;
  float weight = 0.4f;
  float decay = 0.8f;
  float maxLen = 0.8f;
  
  float2 uvCenter = vsOut.tex;
  
  float centerToLightUVLen = length(uvCenter - lightPosUV);
  
  [branch] if(centerToLightUVLen >= maxLen)
      return 0.0f;
  
  float2 uvStep = (lightPosUV - uvCenter) * density / NUM_SAMPLES;
  
  float2 sampleUV = uvCenter;
  float sampleWeight = weight;
  
  float4 colorAccum = radialBlurInTex.SampleLevel(samplerLinearClamp, sampleUV, 0);
  
  for(int i = 0; i < NUM_SAMPLES; ++i)
  {
    sampleUV += uvStep;
  
    float4 sampleColor = radialBlurInTex.SampleLevel(samplerLinearClamp, sampleUV, 0);
    
    colorAccum += sampleColor * sampleWeight;
    
    sampleWeight *= decay;
  }
  
  colorAccum /= NUM_SAMPLES;
  
  float2 lightPosH = lightPosUV * float2(2.0f, -2.0f) + float2(-1.0f, 1.0f);
  float centerLen = sqrt(max(1e-4, dot(lightPosH, lightPosH)));
  float borderDecay = saturate(8.0f -  centerLen * 7.0f);
  
  //colorAccum *= borderDecay;
  
  colorAccum *= saturate(8.0f - (centerToLightUVLen) / maxLen * 8.0f);
  
  return float4(colorAccum.xyz, 1.0f);
}
    
    ]]>
  </shader>

  <variable type='BlendState' name='accumBlend'>
    <state name='blendRTDesc' index='0'>
      <state name='blendEnable' value='true'/>
      <state name='srcBlend' value='SRC_ALPHA'/>
      <state name='dstBlend' value='ONE'/>
      <state name='blendOP' value='ADD'/>
    </state>
  </variable>

  <technique name='RadialBlur'>
    <pass>
      <state value='disableDepth'/>
      <state value='accumBlend'/>
      <vs entry='PostProcessVS'/>
      <ps entry='RadialBlurPS'/>
    </pass>
  </technique>
  
</effect>
