<?xml version="1.0" encoding="utf-8"?>

<effect>
  <include name="PostProcess.xml"/>
  <include name="Material.xml"/>
  <include name="Lighting.xml"/>
  <include name="IBL.xml"/>
  
  
  <!--Lighting-->

  <variable type='Texture2D' format='float' name='linearDepthTex'/>
  <variable type='Texture2D' name='gbuffer0'/>
  <variable type='Texture2D' name='gbuffer1'/>
  <variable type='Texture2D' name='gbuffer2'/>
  <variable type='Texture2D' format='int' name='reflectionMapIDTex'/>

  <variable type='cbuffer' name='cb_lightingPS_perFrame'>
    <variable type='float4x4' name='proj'/>
    <variable type='float4x4' name='invView'/>
    <variable type='float2' name='camNearFar'/>
    <variable type='float3' name='viewPos'/>
  </variable>

  <variable type='cbuffer' name='cb_lightingIBL'>
    <variable type='int4' name='reflectionMapID'/>
  </variable>

  <shader>
    <![CDATA[

struct LightingPSOut
{
  float4 light0 : SV_TARGET0;
  float4 light1 : SV_TARGET1;
};

LightingPSOut LightingPS(PostProcessVSOut vsOut)
{
  LightingPSOut psOut;
  
  float4 gbuf0 = gbuffer0.SampleLevel(samplerPoint, vsOut.tex, 0.0f);
  float4 gbuf1 = gbuffer1.SampleLevel(samplerPoint, vsOut.tex, 0.0f);
  float4 gbuf2 = gbuffer2.SampleLevel(samplerPoint, vsOut.tex, 0.0f);
  
  Material mat = GbufferToMaterial(gbuf0, gbuf1, gbuf2);
  
  float linearDepth = linearDepthTex.SampleLevel(samplerPoint, vsOut.tex, 0.0f);
  
//Compute posV, posW
  float2 screenSize = gbuffer0.Length.xy;
  float3 posV = LinearDepthToViewPos(linearDepth, camNearFar, vsOut.pos.xy, screenSize, proj);
  float3 posW = mul(float4(posV, 1.0f), invView).xyz;
  
  float3 n = mat.normal;
  
//Compute In Light
  float3 light_in = ComputeInLightRadiance(posW, n);

//Calculate Shadow
  float shadow = ComputeShadow(posW, posV.z);
  light_in *= shadow;
  
  float3 l = -GetLightDir(posW);
  
  psOut.light0 = 0.0f;
  psOut.light0.xyz = light_in / PI;
  
  float3 v = normalize(viewPos.xyz - posW.xyz);
	float3 h = normalize(l + v);

  float3 specColor = lerp(0.03f, mat.baseColor, mat.metallic);
  
  float D = NDF_GGX(n, h, mat.roughness);
  float3 F = Fresnel_Schlick(v, h, specColor);
  float G = G_Smith(n, l, v, mat.roughness);
  float n_dot_l = max(1e-6, dot(n, l));
  float n_dot_v = max(1e-6, dot(n, v));
  
  psOut.light1 = 0.0f;
  psOut.light1.xyz = light_in * D * F * G / (4 * n_dot_l * n_dot_v);
  
  psOut.light1.xyz += mat.emissive;
  
  psOut.light0.w = 1.0f;
  psOut.light1.w = 1.0f;
  
  return psOut;
}


float4 LightingIBLPS(PostProcessVSOut vsOut) : SV_TARGET
{
  //float3 light1 = lightAccum1.SampleLevel(samplerPoint, vsOut.tex, 0).xyz;
  
  int mapID = reflectionMapIDTex.Load(int3(vsOut.pos.xy, 0));
  if(mapID != reflectionMapID.x)
    return float4(0.0f, 0.0f, 0.0f, 1.0f);

  float4 gbuf0 = gbuffer0.SampleLevel(samplerPoint, vsOut.tex, 0.0f);
  float4 gbuf1 = gbuffer1.SampleLevel(samplerPoint, vsOut.tex, 0.0f);
  
  Material mat = GbufferToMaterial(gbuf0, gbuf1, 0.0f);
  
  float linearDepth = linearDepthTex.SampleLevel(samplerPoint, vsOut.tex, 0.0f);
  
//Compute posV, posW
  float2 screenSize = gbuffer0.Length.xy;
  float3 posV = LinearDepthToViewPos(linearDepth, camNearFar, vsOut.pos.xy, screenSize, proj);
  float3 posW = mul(float4(posV, 1.0f), invView).xyz;
  
  float3 n = mat.normal;
	float3 v = normalize(viewPos.xyz - posW.xyz);
  
  float3 specColor = lerp(0.03f, mat.baseColor, mat.metallic);
  float3 diffColor = mat.baseColor - mat.baseColor * mat.metallic;
  
  float n_dot_v = max(1e-6, dot(n, v));
  
  float3 R = reflect(-v, n);
  float3 iblColor = ComputeIBL(R, mat.roughness, n_dot_v, specColor, diffColor);
  
  return float4(iblColor, 1.0f);
}

    ]]>
  </shader>

  <variable type='BlendState' name='accumBlend'>
    <state name="blendRTDesc" index="0">
      <state name="blendEnable" value="true"/>
      <state name="srcBlend" value="ONE"/>
      <state name="dstBlend" value="ONE"/>
      <state name="dstBlendAlpha" value="ZERO"/>
    </state>
  </variable>

  <technique name='Lighting'>
    <pass>
      <state value='disableDepth'/>
      <state value='accumBlend'/>
      <vs entry='PostProcessVS'/>
      <ps entry='LightingPS'/>
    </pass>
  </technique>

  <technique name='LightingIBL'>
    <pass>
      <state value='disableDepth'/>
      <state value='accumBlend'/>
      <vs entry='PostProcessVS'/>
      <ps entry='LightingIBLPS'/>
    </pass>
  </technique>
  
</effect>
