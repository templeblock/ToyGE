<?xml version="1.0" encoding="utf-8"?>

<effect>
  <variable type="RWTexture2D" format="float3" name="resultTex"/>
  <variable type="Texture2D" format="float3" name="backgroundTex"/>
  <variable type="Texture2D" format="int" name="listHead"/>
  <variable type="Texture2D" format="float3" name="listTransmittance"/>
  <variable type="Texture2D" format="float3" name="listLighting"/>
  <variable type="Texture2D" format="float2" name="listDepthLink"/>

  <variable type="cbuffer" name="cb_oitSort">
    <variable type="int2" name="texSize"/>
  </variable>
  
  <shader>
    <![CDATA[

#define MAX_PIXEL_LIST_SIZE 8

[numthreads(16, 16, 1)]
void OITSortCS(uint3 dtID : SV_DispatchThreadID)
{
  float3 bgColor = backgroundTex[dtID.xy];

  int headIndex = listHead[dtID.xy];
  if( headIndex == -1 )
  {
    resultTex[dtID.xy] = bgColor;
    return;
  }
  
  float3 transmittanceArray[MAX_PIXEL_LIST_SIZE];
  float3 lightingArray[MAX_PIXEL_LIST_SIZE];
  float depthArray[MAX_PIXEL_LIST_SIZE];
  
  int listSize = 0;
  
  int nextIndex = headIndex;
  while(nextIndex != -1 && listSize < MAX_PIXEL_LIST_SIZE)
  {
    uint2 nodePos = uint2(uint(nextIndex) % uint(texSize.x), uint(nextIndex) / uint(texSize.x));
    transmittanceArray[listSize] = listTransmittance[nodePos];
    lightingArray[listSize] = listLighting[nodePos];
    float2 depthLink = listDepthLink[nodePos];
    depthArray[listSize] = depthLink.x;
    nextIndex = int(depthLink.y);
    
    ++listSize;
  }
  
  //Insertion Sort
  for(int i = 1; i < listSize; ++i)
  {
    float depth = depthArray[i];
    float3 transmittance = transmittanceArray[i];
    float3 lighting = lightingArray[i];
    int j = i;
    while(j > 0 && depthArray[j - 1] > depth)
    {
      depthArray[j] = depthArray[j-1];
      transmittanceArray[j] = transmittanceArray[j-1];
      lightingArray[j] = lightingArray[j-1];
      --j;
    }
    depthArray[j] = depth;
    transmittanceArray[j] = transmittance;
    lightingArray[j] = lighting;
  }
  
  float3 finalColor = bgColor;
  for(int k = listSize - 1; k >= 0; --k)
    finalColor = finalColor * transmittanceArray[k] + lightingArray[k];
  
  resultTex[dtID.xy] = finalColor;
}
    
    ]]>
  </shader>

  <technique name="OITSort">
    <pass>
      <cs entry="OITSortCS"/>
    </pass>
  </technique>
  
</effect>