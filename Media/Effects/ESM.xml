<?xml version="1.0" encoding="utf-8"?>

<effect>
  <include name="ESMDefines.xml"/>
  
  <shader>
    <![CDATA[
    
float CalcShadow_ESM(Texture2DArray tex, int arrayIndex, float2 uv, float reciever, float nearFar)
{
  float occluder = tex.SampleLevel(samplerLinearClamp, float3(uv, arrayIndex), 0).r;
  float shadow = 1.0f;
  if(! (uv.x < 0.0f || uv.x > 1.0f || uv.y < 0.0f || uv.y > 1.0f) )
  {
    shadow = exp(occluder - ESM_C * nearFar * reciever);
    shadow = saturate(shadow);
  }
  /*
  if(shadow > 1.0f + 0.2f)
  {   
    float shadowEx = 0.0f;
    float2 texelSize = 1.0f / tex.Length.xy;
      
    int radius = 1;
    float occluderEx = 0.0f;
    for(int y = -radius; y <= radius; ++y)
    {
      for(int x = -radius; x <= radius; ++x)
      {
        occluderEx += tex.SampleLevel(samplerLinearClamp, float3(uv + texelSize * float2(x, y), arrayIndex), 0).r;
        //shadowEx += saturate(exp(occluderEx - ESM_C * nearFar * reciever));
      }
    }
      
    occluderEx /= (radius * 2 + 1) * (radius * 2 + 1);
    
    shadow = saturate(exp(occluderEx - ESM_C * nearFar * reciever));
  }
  else
  {
    shadow = saturate(shadow);
  }
  */
  
  return shadow;
}

float CalcShadow_ESM(TextureCubeArray tex, int arrayIndex, float3 dir, float reciever, float nearFar)
{
  float occluder = tex.SampleLevel(samplerLinearClamp, float4(dir, arrayIndex), 0).r;
  float shadow = 1.0f;
  //if(occluder < 0.99f)
  //{
    shadow = exp(occluder - ESM_C * reciever);
    shadow = saturate(shadow);
  //}
  
  return shadow;
}
    
    ]]>
  </shader>
</effect>