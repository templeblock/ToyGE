<?xml version="1.0" encoding="utf-8"?>

<effect>
  <include name="ESMDefines.xml"/>
  <include name="Util.xml"/>
  <include name="VSMUtil.xml"/>
  <include name="CommonState.xml"/>
  
  <variable type='cbuffer' name='cb_vs_perObj'>
    <variable type='float4x4' name='world'/>
  </variable>
  
  <variable type='cbuffer' name='cb_point_gs_perFrame'>
    <variable type='float4x4' name='view'/>
    <variable type='float4x4' name='proj'/>
    <variable type='float4' name='pointMaxDist'/>
  </variable>

  <variable type='Texture2D' name='opacityTex' />

  <shader>
    <![CDATA[
struct PointSMVSIn
{
	float3 pos : POSITION;
#ifdef OPACITY_TEX
  float3 tex : TEXCOORD;
#endif
};

struct PointSMVSOut
{
	float3 posV : POSITION_V;
  float4 posH : SV_POSITION;
#ifdef OPACITY_TEX
  float3 tex : TEXCOORD;
#endif
};

PointSMVSOut PointSMVS(PointSMVSIn vsIn)
{
	PointSMVSOut vsOut;

	float3 posW = mul(float4(vsIn.pos, 1.0f), world).xyz;
  vsOut.posV = mul(float4(posW, 1.0f), view).xyz;
  vsOut.posH = mul(float4(vsOut.posV, 1.0f), proj);
  
#ifdef OPACITY_TEX
  vsOut.tex = vsIn.tex;
#endif

	return vsOut;
}

/*
struct PointSMGSOut
{
  float4 posH : SV_POSITION;
  float3 posV : POSITION_V;
#ifdef OPACITY_TEX
  float3 tex : TEXCOORD;
#endif
  uint rtIndex : SV_RenderTargetArrayIndex;
};

[maxvertexcount(6 * 3)]
void PointSMGS(
  triangle PointSMVSOut vsOut[3],
  inout TriangleStream<PointSMGSOut> output)
{
  PointSMGSOut gsOut;
  for(uint faceIndex = 0; faceIndex < 6; ++faceIndex)
  {
    float4x4 viewProj = pointViewProjArray[faceIndex];
    float4x4 view = pointViewArray[faceIndex];
    for(uint i = 0; i < 3; ++i)
    {
      gsOut.posH = mul(vsOut[i].posW, viewProj);
      gsOut.posV = mul(vsOut[i].posW, view).xyz;
#ifdef OPACITY_TEX
      gsOut.tex = vsOut[i].tex;
#endif
      gsOut.rtIndex = faceIndex;
      output.Append(gsOut);
    }
    output.RestartStrip();
  }
}
*/

float PointShadowDepthPS(PointSMVSOut vsOut) : SV_TARGET
{
#ifdef OPACITY_TEX
  float opacity = opacityTex.Sample(samplerLinear, vsOut.tex.xy).x;
  clip(opacity - 0.1f);
#endif
  float z = (vsOut.posV.z) / pointMaxDist.x;
	return z;
}

    ]]>
  </shader>

  <technique name='PointShadowDepth'>
    <pass>
      <vs entry='PointSMVS'/>
      <ps entry='PointShadowDepthPS'/>
    </pass>
  </technique>

  <!--<technique name='PointShadowDepth_OPACITYTEX'>
    <pass>
      <macro name='OPACITY_TEX'/>
      <vs entry='PointSMVS'/>
      <ps entry='PointShadowDepthPS'/>
    </pass>
  </technique>-->
  
</effect>