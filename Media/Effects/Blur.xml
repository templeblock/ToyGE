<?xml version="1.0" encoding="utf-8"?>

<effect>
  <include name="PostProcess.xml"/>
  <include name="CommonState.xml"/>
  <include name="BlurConfig.xml"/>
  
  <variable type='Texture2D' name='inTex'/>
  <variable type='cbuffer' name='cb_blur'>
    <variable type='float4' name='texelSize'/>
  </variable>

  <variable type='SamplerState' name='samPoint'>
    <state name='filter' value='MIN_MAG_MIP_POINT'/>
    <state name='addressU' value='CLAMP'/>
    <state name='addressV' value='CLAMP'/>
    <state name='borderColor' value='0.0 0.0 0.0 0.0'/>
  </variable>
  
  <shader>
    <![CDATA[
    
float4 GaussBlur(PostProcessVSOut vsOut, float2 axis)
{
  float weights[MAX_BLUR_RADIUS + 1] = (float[MAX_BLUR_RADIUS + 1])gaussTable;
  float4 sum = 0.0f;
  [unroll]
  for(int i = -BLUR_RADIUS; i <= BLUR_RADIUS; ++i)
  {
    float2 ti = (vsOut.pos.xy + i * axis) * texelSize.xy;
    float4 vi = inTex.SampleLevel(samPoint, ti, 0);
    sum += weights[abs(i)] * vi;
  }
  return sum;
}
    
float4 GaussBlurXPS(PostProcessVSOut vsOut) : SV_TARGET
{
  return GaussBlur(vsOut, float2(1.0, 0.0));
}

float4 GaussBlurYPS(PostProcessVSOut vsOut) : SV_TARGET
{
  return GaussBlur(vsOut, float2(0.0, 1.0));
}
    
    ]]>
  </shader>

  <technique name='GaussBlurX'>
    <pass>
      <state value='disableDepth'/>
      <vs entry='PostProcessVS'/>
      <ps entry='GaussBlurXPS'/>
    </pass>
  </technique>

  <technique name='GaussBlurY'>
    <pass>
      <state value='disableDepth'/>
      <vs entry='PostProcessVS'/>
      <ps entry='GaussBlurYPS'/>
    </pass>
  </technique>
  
  <shader>
    <![CDATA[

float GaussLogBlur(PostProcessVSOut vsOut, float2 axis)
{
  float weights[MAX_BLUR_RADIUS + 1] = (float[MAX_BLUR_RADIUS + 1])gaussTable;
  
  float2 t0 = (vsOut.pos.xy - BLUR_RADIUS * axis) * texelSize.xy;
  float d0 = inTex.SampleLevel(samPoint, t0, 0).x;
  float w0 = weights[BLUR_RADIUS];
  
  float sum = 0.0f;
  [unroll] for(int i = -BLUR_RADIUS + 1; i <= BLUR_RADIUS; ++i)
  {
    float2 ti = (vsOut.pos.xy - i * axis) * texelSize.xy;
    float di = inTex.SampleLevel(samPoint, ti, 0).x;
    sum += weights[abs(i)] * exp((di - d0));
  }
  sum = log(w0 + sum);
  sum += d0;
  
  return sum;
}

float GaussLogBlurXPS(PostProcessVSOut vsOut) : SV_TARGET
{
  return GaussLogBlur(vsOut, float2(1.0, 0.0));
}

float GaussLogBlurYPS(PostProcessVSOut vsOut) : SV_TARGET
{
  return GaussLogBlur(vsOut, float2(0.0, 1.0));
}

    ]]>
  </shader>
  
  <technique name='GaussLogBlurX'>
    <pass>
      <state value='disableDepth'/>
      <vs entry='PostProcessVS'/>
      <ps entry='GaussLogBlurXPS'/>
    </pass>
  </technique>

  <technique name='GaussLogBlurY'>
    <pass>
      <state value='disableDepth'/>
      <vs entry='PostProcessVS'/>
      <ps entry='GaussLogBlurYPS'/>
    </pass>
  </technique>
  
</effect>